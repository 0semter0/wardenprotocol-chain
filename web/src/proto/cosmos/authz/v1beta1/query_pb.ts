// @generated by protoc-gen-es v1.3.0 with parameter "target=ts"
// @generated from file cosmos/authz/v1beta1/query.proto (package cosmos.authz.v1beta1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { PageRequest, PageResponse } from "../../base/query/v1beta1/pagination_pb.js";
import { Grant } from "./authz_pb.js";

/**
 * QueryGrantsRequest is the request type for the Query/Grants RPC method.
 *
 * @generated from message cosmos.authz.v1beta1.QueryGrantsRequest
 */
export class QueryGrantsRequest extends Message<QueryGrantsRequest> {
  /**
   * @generated from field: string granter = 1;
   */
  granter = "";

  /**
   * @generated from field: string grantee = 2;
   */
  grantee = "";

  /**
   * Optional, msg_type_url, when set, will query only grants matching given msg type.
   *
   * @generated from field: string msg_type_url = 3;
   */
  msgTypeUrl = "";

  /**
   * pagination defines an pagination for the request.
   *
   * @generated from field: cosmos.base.query.v1beta1.PageRequest pagination = 4;
   */
  pagination?: PageRequest;

  constructor(data?: PartialMessage<QueryGrantsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cosmos.authz.v1beta1.QueryGrantsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "granter", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "grantee", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "msg_type_url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "pagination", kind: "message", T: PageRequest },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryGrantsRequest {
    return new QueryGrantsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryGrantsRequest {
    return new QueryGrantsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryGrantsRequest {
    return new QueryGrantsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryGrantsRequest | PlainMessage<QueryGrantsRequest> | undefined, b: QueryGrantsRequest | PlainMessage<QueryGrantsRequest> | undefined): boolean {
    return proto3.util.equals(QueryGrantsRequest, a, b);
  }
}

/**
 * QueryGrantsResponse is the response type for the Query/Authorizations RPC method.
 *
 * @generated from message cosmos.authz.v1beta1.QueryGrantsResponse
 */
export class QueryGrantsResponse extends Message<QueryGrantsResponse> {
  /**
   * authorizations is a list of grants granted for grantee by granter.
   *
   * @generated from field: repeated cosmos.authz.v1beta1.Grant grants = 1;
   */
  grants: Grant[] = [];

  /**
   * pagination defines an pagination for the response.
   *
   * @generated from field: cosmos.base.query.v1beta1.PageResponse pagination = 2;
   */
  pagination?: PageResponse;

  constructor(data?: PartialMessage<QueryGrantsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "cosmos.authz.v1beta1.QueryGrantsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "grants", kind: "message", T: Grant, repeated: true },
    { no: 2, name: "pagination", kind: "message", T: PageResponse },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryGrantsResponse {
    return new QueryGrantsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryGrantsResponse {
    return new QueryGrantsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryGrantsResponse {
    return new QueryGrantsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryGrantsResponse | PlainMessage<QueryGrantsResponse> | undefined, b: QueryGrantsResponse | PlainMessage<QueryGrantsResponse> | undefined): boolean {
    return proto3.util.equals(QueryGrantsResponse, a, b);
  }
}

