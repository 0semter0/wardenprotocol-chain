syntax = "proto3";

package warden.warden.v1beta2;

option go_package = "github.com/warden-protocol/wardenprotocol/warden/x/warden/types/v1beta2";

// Keychain is an operator that can create and manage Keys.
//
// Users can request a Keychain to create a new Key using a particular scheme.
// The Keychain will store the private key, while the public key will be stored
// inside the Key object on-chain.
//
// Users can request a Keychain to sign data using a particular Key.
//
// The Keychain has an allowlist of addresses that can be used to write data
// on-chain (public keys and signatures). This can also be used to rotate the
// identity of the Keychain.
//
// A Keychain can be deactivated, in which case it will not be able to create
// new Keys or sign data.
message Keychain {
  // ID of the Keychain.
  uint64 id = 1;

  // Address of the creator of the Keychain.
  string creator = 2;

  // A human-readable description of the Keychain.
  string description = 3;

  // Addresses that can update this Keychain.
  repeated string admins = 4;

  // Addresses that can write data on-chain on behalf of this Keychain.
  repeated string parties = 5;

  // ID of the intent that will need to be satisfied for updating this
  // Keychain.
  uint64 admin_intent_id = 6;

  // Fees for creating and signing Keys.
  KeychainFees fees = 7;

  // Whether the Keychain is active or not. If not active, all the requests
  // for this Keychain will be rejected.
  bool is_active = 8;
}

// Fees for creating and signing Keys.
message KeychainFees {
  // Fee for creating a new Key.
  int64 key_req = 1;

  // Fee for signing data.
  int64 sig_req = 2;
}
