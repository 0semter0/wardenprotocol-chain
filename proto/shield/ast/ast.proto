syntax = "proto3";
package shield.ast;

import "amino/amino.proto";
import "gogoproto/gogo.proto";
import "shield/token/token.proto";

option go_package = "github.com/warden-protocol/wardenprotocol/shield/ast";

message Expression {
    oneof value {
        Identifier identifier = 1 [(amino.oneof_name) = "Identifier"];
        IntegerLiteral integer_literal = 2 [(amino.oneof_name) = "IntegerLiteral"];
        BooleanLiteral boolean_literal = 3 [(amino.oneof_name) = "BooleanLiteral"];
        ArrayLiteral array_literal = 4 [(amino.oneof_name) = "ArrayLiteral"];
        CallExpression call_expression = 5 [(amino.oneof_name) = "CallExpression"];
        InfixExpression infix_expression = 6 [(amino.oneof_name) = "InfixExpression"];
    }
}

message Identifier {
    .shield.token.Token token = 1 [ (gogoproto.nullable) = false ];
    string value = 2;
}

message IntegerLiteral {
    .shield.token.Token token = 1 [ (gogoproto.nullable) = false ];
    int64 value = 2;
}

message BooleanLiteral {
    .shield.token.Token token = 1 [ (gogoproto.nullable) = false ];
    bool value = 2;
}

message ArrayLiteral {
    .shield.token.Token token = 1 [ (gogoproto.nullable) = false ];
    repeated Expression elements = 2;
}

message CallExpression {
    .shield.token.Token token = 1 [ (gogoproto.nullable) = false ];
    Identifier function = 2;
    repeated Expression arguments = 3;
}

message InfixExpression {
    .shield.token.Token token = 1 [ (gogoproto.nullable) = false ];
    Expression left = 2;
    string operator = 3;
    Expression right = 4;
}
