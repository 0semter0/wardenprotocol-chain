// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: warden/warden/keychain.proto

package types

import (
	fmt "fmt"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Keychain struct {
	Id            uint64        `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Creator       string        `protobuf:"bytes,2,opt,name=creator,proto3" json:"creator,omitempty"`
	Description   string        `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	Admins        []string      `protobuf:"bytes,4,rep,name=admins,proto3" json:"admins,omitempty"`
	Parties       []string      `protobuf:"bytes,5,rep,name=parties,proto3" json:"parties,omitempty"`
	AdminIntentId uint64        `protobuf:"varint,6,opt,name=admin_intent_id,json=adminIntentId,proto3" json:"admin_intent_id,omitempty"`
	Fees          *KeychainFees `protobuf:"bytes,7,opt,name=fees,proto3" json:"fees,omitempty"`
	IsActive      bool          `protobuf:"varint,8,opt,name=is_active,json=isActive,proto3" json:"is_active,omitempty"`
}

func (m *Keychain) Reset()         { *m = Keychain{} }
func (m *Keychain) String() string { return proto.CompactTextString(m) }
func (*Keychain) ProtoMessage()    {}
func (*Keychain) Descriptor() ([]byte, []int) {
	return fileDescriptor_d4778597696f62bf, []int{0}
}
func (m *Keychain) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Keychain) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Keychain.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Keychain) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Keychain.Merge(m, src)
}
func (m *Keychain) XXX_Size() int {
	return m.Size()
}
func (m *Keychain) XXX_DiscardUnknown() {
	xxx_messageInfo_Keychain.DiscardUnknown(m)
}

var xxx_messageInfo_Keychain proto.InternalMessageInfo

func (m *Keychain) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Keychain) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *Keychain) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Keychain) GetAdmins() []string {
	if m != nil {
		return m.Admins
	}
	return nil
}

func (m *Keychain) GetParties() []string {
	if m != nil {
		return m.Parties
	}
	return nil
}

func (m *Keychain) GetAdminIntentId() uint64 {
	if m != nil {
		return m.AdminIntentId
	}
	return 0
}

func (m *Keychain) GetFees() *KeychainFees {
	if m != nil {
		return m.Fees
	}
	return nil
}

func (m *Keychain) GetIsActive() bool {
	if m != nil {
		return m.IsActive
	}
	return false
}

type KeychainFees struct {
	KeyReq int64 `protobuf:"varint,1,opt,name=key_req,json=keyReq,proto3" json:"key_req,omitempty"`
	SigReq int64 `protobuf:"varint,2,opt,name=sig_req,json=sigReq,proto3" json:"sig_req,omitempty"`
}

func (m *KeychainFees) Reset()         { *m = KeychainFees{} }
func (m *KeychainFees) String() string { return proto.CompactTextString(m) }
func (*KeychainFees) ProtoMessage()    {}
func (*KeychainFees) Descriptor() ([]byte, []int) {
	return fileDescriptor_d4778597696f62bf, []int{1}
}
func (m *KeychainFees) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *KeychainFees) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_KeychainFees.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *KeychainFees) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KeychainFees.Merge(m, src)
}
func (m *KeychainFees) XXX_Size() int {
	return m.Size()
}
func (m *KeychainFees) XXX_DiscardUnknown() {
	xxx_messageInfo_KeychainFees.DiscardUnknown(m)
}

var xxx_messageInfo_KeychainFees proto.InternalMessageInfo

func (m *KeychainFees) GetKeyReq() int64 {
	if m != nil {
		return m.KeyReq
	}
	return 0
}

func (m *KeychainFees) GetSigReq() int64 {
	if m != nil {
		return m.SigReq
	}
	return 0
}

func init() {
	proto.RegisterType((*Keychain)(nil), "warden.warden.Keychain")
	proto.RegisterType((*KeychainFees)(nil), "warden.warden.KeychainFees")
}

func init() { proto.RegisterFile("warden/warden/keychain.proto", fileDescriptor_d4778597696f62bf) }

var fileDescriptor_d4778597696f62bf = []byte{
	// 331 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x91, 0xbd, 0x4e, 0xf3, 0x30,
	0x14, 0x86, 0xeb, 0xb4, 0x5f, 0x9a, 0xba, 0x5f, 0x41, 0xf2, 0x00, 0x96, 0x8a, 0xa2, 0xa8, 0x03,
	0xca, 0x42, 0x2a, 0xc1, 0x05, 0xf0, 0x33, 0x20, 0x55, 0x6c, 0xde, 0x60, 0x89, 0xd2, 0xf8, 0xd0,
	0x1e, 0x95, 0x26, 0xa9, 0x6d, 0x7e, 0x72, 0x17, 0x5c, 0x16, 0x63, 0x47, 0x46, 0xd4, 0xde, 0x07,
	0x42, 0x75, 0x12, 0xa9, 0x30, 0x9d, 0x3c, 0xef, 0x73, 0x62, 0xf9, 0xf8, 0xd0, 0x93, 0xd7, 0x44,
	0x49, 0xc8, 0xc6, 0x75, 0x59, 0x40, 0x99, 0xce, 0x13, 0xcc, 0xa2, 0x42, 0xe5, 0x26, 0x67, 0x83,
	0x2a, 0x8e, 0xaa, 0x32, 0xfa, 0x26, 0xd4, 0xbb, 0xab, 0x3b, 0xd8, 0x01, 0x75, 0x50, 0x72, 0x12,
	0x90, 0xb0, 0x23, 0x1c, 0x94, 0x8c, 0xd3, 0x6e, 0xaa, 0x20, 0x31, 0xb9, 0xe2, 0x4e, 0x40, 0xc2,
	0x9e, 0x68, 0x90, 0x05, 0xb4, 0x2f, 0x41, 0xa7, 0x0a, 0x0b, 0x83, 0x79, 0xc6, 0xdb, 0xd6, 0xee,
	0x47, 0xec, 0x88, 0xba, 0x89, 0x5c, 0x62, 0xa6, 0x79, 0x27, 0x68, 0x87, 0x3d, 0x51, 0xd3, 0xee,
	0xcc, 0x22, 0x51, 0x06, 0x41, 0xf3, 0x7f, 0x56, 0x34, 0xc8, 0x4e, 0xe9, 0xa1, 0xed, 0x89, 0x31,
	0x33, 0x90, 0x99, 0x18, 0x25, 0x77, 0xed, 0x55, 0x06, 0x36, 0x9e, 0xd8, 0x74, 0x22, 0xd9, 0x98,
	0x76, 0x1e, 0x01, 0x34, 0xef, 0x06, 0x24, 0xec, 0x9f, 0x0f, 0xa3, 0x5f, 0x03, 0x45, 0xcd, 0x30,
	0xb7, 0x00, 0x5a, 0xd8, 0x46, 0x36, 0xa4, 0x3d, 0xd4, 0x71, 0x92, 0x1a, 0x7c, 0x01, 0xee, 0x05,
	0x24, 0xf4, 0x84, 0x87, 0xfa, 0xda, 0xf2, 0xe8, 0x8a, 0xfe, 0xdf, 0xff, 0x85, 0x1d, 0xd3, 0xee,
	0x02, 0xca, 0x58, 0xc1, 0xca, 0x3e, 0x44, 0x5b, 0xb8, 0x0b, 0x28, 0x05, 0xac, 0x76, 0x42, 0xe3,
	0xcc, 0x0a, 0xa7, 0x12, 0x1a, 0x67, 0x02, 0x56, 0x37, 0xf7, 0x1f, 0x1b, 0x9f, 0xac, 0x37, 0x3e,
	0xf9, 0xda, 0xf8, 0xe4, 0x7d, 0xeb, 0xb7, 0xd6, 0x5b, 0xbf, 0xf5, 0xb9, 0xf5, 0x5b, 0x0f, 0x97,
	0x33, 0x34, 0xf3, 0xe7, 0x69, 0x94, 0xe6, 0xcb, 0x7a, 0x1b, 0x67, 0x76, 0x09, 0x69, 0xfe, 0x54,
	0xf3, 0x1f, 0x1c, 0xbf, 0x35, 0x1f, 0xa6, 0x2c, 0x40, 0x4f, 0x5d, 0xeb, 0x2f, 0x7e, 0x02, 0x00,
	0x00, 0xff, 0xff, 0xc3, 0x2e, 0xc2, 0xbe, 0xd3, 0x01, 0x00, 0x00,
}

func (m *Keychain) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Keychain) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Keychain) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IsActive {
		i--
		if m.IsActive {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x40
	}
	if m.Fees != nil {
		{
			size, err := m.Fees.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintKeychain(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if m.AdminIntentId != 0 {
		i = encodeVarintKeychain(dAtA, i, uint64(m.AdminIntentId))
		i--
		dAtA[i] = 0x30
	}
	if len(m.Parties) > 0 {
		for iNdEx := len(m.Parties) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Parties[iNdEx])
			copy(dAtA[i:], m.Parties[iNdEx])
			i = encodeVarintKeychain(dAtA, i, uint64(len(m.Parties[iNdEx])))
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.Admins) > 0 {
		for iNdEx := len(m.Admins) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Admins[iNdEx])
			copy(dAtA[i:], m.Admins[iNdEx])
			i = encodeVarintKeychain(dAtA, i, uint64(len(m.Admins[iNdEx])))
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintKeychain(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintKeychain(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintKeychain(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *KeychainFees) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *KeychainFees) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *KeychainFees) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SigReq != 0 {
		i = encodeVarintKeychain(dAtA, i, uint64(m.SigReq))
		i--
		dAtA[i] = 0x10
	}
	if m.KeyReq != 0 {
		i = encodeVarintKeychain(dAtA, i, uint64(m.KeyReq))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintKeychain(dAtA []byte, offset int, v uint64) int {
	offset -= sovKeychain(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Keychain) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovKeychain(uint64(m.Id))
	}
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovKeychain(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovKeychain(uint64(l))
	}
	if len(m.Admins) > 0 {
		for _, s := range m.Admins {
			l = len(s)
			n += 1 + l + sovKeychain(uint64(l))
		}
	}
	if len(m.Parties) > 0 {
		for _, s := range m.Parties {
			l = len(s)
			n += 1 + l + sovKeychain(uint64(l))
		}
	}
	if m.AdminIntentId != 0 {
		n += 1 + sovKeychain(uint64(m.AdminIntentId))
	}
	if m.Fees != nil {
		l = m.Fees.Size()
		n += 1 + l + sovKeychain(uint64(l))
	}
	if m.IsActive {
		n += 2
	}
	return n
}

func (m *KeychainFees) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.KeyReq != 0 {
		n += 1 + sovKeychain(uint64(m.KeyReq))
	}
	if m.SigReq != 0 {
		n += 1 + sovKeychain(uint64(m.SigReq))
	}
	return n
}

func sovKeychain(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozKeychain(x uint64) (n int) {
	return sovKeychain(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Keychain) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowKeychain
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Keychain: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Keychain: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKeychain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKeychain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthKeychain
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthKeychain
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKeychain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthKeychain
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthKeychain
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Admins", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKeychain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthKeychain
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthKeychain
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Admins = append(m.Admins, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Parties", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKeychain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthKeychain
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthKeychain
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Parties = append(m.Parties, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdminIntentId", wireType)
			}
			m.AdminIntentId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKeychain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AdminIntentId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fees", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKeychain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthKeychain
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthKeychain
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Fees == nil {
				m.Fees = &KeychainFees{}
			}
			if err := m.Fees.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsActive", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKeychain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsActive = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipKeychain(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthKeychain
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *KeychainFees) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowKeychain
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: KeychainFees: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: KeychainFees: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyReq", wireType)
			}
			m.KeyReq = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKeychain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KeyReq |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SigReq", wireType)
			}
			m.SigReq = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKeychain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SigReq |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipKeychain(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthKeychain
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipKeychain(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowKeychain
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowKeychain
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowKeychain
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthKeychain
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupKeychain
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthKeychain
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthKeychain        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowKeychain          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupKeychain = fmt.Errorf("proto: unexpected end of group")
)
