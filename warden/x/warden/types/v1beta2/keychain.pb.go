// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: warden/warden/v1beta2/keychain.proto

package v1beta2

import (
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Keychain is an operator that can create and manage Keys.
//
// Users can request a Keychain to create a new Key using a particular scheme.
// The Keychain will store the private key, while the public key will be stored
// inside the Key object on-chain.
//
// Users can request a Keychain to sign data using a particular Key.
//
// The Keychain has an allowlist of addresses that can be used to write data
// on-chain (public keys and signatures). This can also be used to rotate the
// identity of the Keychain.
type Keychain struct {
	// ID of the Keychain.
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// Address of the creator of the Keychain.
	Creator string `protobuf:"bytes,2,opt,name=creator,proto3" json:"creator,omitempty"`
	// A human-readable description of the Keychain.
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// Addresses that can update this Keychain.
	Admins []string `protobuf:"bytes,4,rep,name=admins,proto3" json:"admins,omitempty"`
	// Addresses that can write data on-chain on behalf of this Keychain.
	Parties []string `protobuf:"bytes,5,rep,name=parties,proto3" json:"parties,omitempty"`
	// Fees for creating and signing Keys.
	Fees *KeychainFees `protobuf:"bytes,7,opt,name=fees,proto3" json:"fees,omitempty"`
}

func (m *Keychain) Reset()         { *m = Keychain{} }
func (m *Keychain) String() string { return proto.CompactTextString(m) }
func (*Keychain) ProtoMessage()    {}
func (*Keychain) Descriptor() ([]byte, []int) {
	return fileDescriptor_ea6bcfb86f73f6a8, []int{0}
}
func (m *Keychain) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Keychain) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Keychain.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Keychain) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Keychain.Merge(m, src)
}
func (m *Keychain) XXX_Size() int {
	return m.Size()
}
func (m *Keychain) XXX_DiscardUnknown() {
	xxx_messageInfo_Keychain.DiscardUnknown(m)
}

var xxx_messageInfo_Keychain proto.InternalMessageInfo

func (m *Keychain) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Keychain) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *Keychain) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Keychain) GetAdmins() []string {
	if m != nil {
		return m.Admins
	}
	return nil
}

func (m *Keychain) GetParties() []string {
	if m != nil {
		return m.Parties
	}
	return nil
}

func (m *Keychain) GetFees() *KeychainFees {
	if m != nil {
		return m.Fees
	}
	return nil
}

// Fees for creating and signing Keys.
type KeychainFees struct {
	// Fee for creating a new Key.
	KeyReq github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,1,rep,name=key_req,json=keyReq,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"key_req"`
	// Fee for signing data.
	SigReq github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,2,rep,name=sig_req,json=sigReq,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"sig_req"`
}

func (m *KeychainFees) Reset()         { *m = KeychainFees{} }
func (m *KeychainFees) String() string { return proto.CompactTextString(m) }
func (*KeychainFees) ProtoMessage()    {}
func (*KeychainFees) Descriptor() ([]byte, []int) {
	return fileDescriptor_ea6bcfb86f73f6a8, []int{1}
}
func (m *KeychainFees) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *KeychainFees) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_KeychainFees.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *KeychainFees) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KeychainFees.Merge(m, src)
}
func (m *KeychainFees) XXX_Size() int {
	return m.Size()
}
func (m *KeychainFees) XXX_DiscardUnknown() {
	xxx_messageInfo_KeychainFees.DiscardUnknown(m)
}

var xxx_messageInfo_KeychainFees proto.InternalMessageInfo

func (m *KeychainFees) GetKeyReq() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.KeyReq
	}
	return nil
}

func (m *KeychainFees) GetSigReq() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.SigReq
	}
	return nil
}

func init() {
	proto.RegisterType((*Keychain)(nil), "warden.warden.v1beta2.Keychain")
	proto.RegisterType((*KeychainFees)(nil), "warden.warden.v1beta2.KeychainFees")
}

func init() {
	proto.RegisterFile("warden/warden/v1beta2/keychain.proto", fileDescriptor_ea6bcfb86f73f6a8)
}

var fileDescriptor_ea6bcfb86f73f6a8 = []byte{
	// 409 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x52, 0x3d, 0x8f, 0xd3, 0x30,
	0x18, 0x8e, 0xd3, 0xd2, 0x72, 0xee, 0x09, 0x89, 0x08, 0x90, 0xe9, 0x90, 0x8b, 0x0e, 0x86, 0xe8,
	0xa4, 0xb3, 0xd5, 0x32, 0xb0, 0x1f, 0xd2, 0x31, 0xb0, 0x65, 0x64, 0xa9, 0x1c, 0xe7, 0x25, 0xb5,
	0xd2, 0xc4, 0x69, 0x1c, 0x3e, 0xc2, 0x0f, 0x60, 0x66, 0xe6, 0x17, 0x20, 0xa6, 0xfe, 0x05, 0xb6,
	0x8e, 0x1d, 0x99, 0x00, 0xb5, 0x43, 0xff, 0x06, 0x8a, 0xe3, 0x48, 0x15, 0x62, 0x66, 0xc9, 0xfb,
	0x3e, 0xef, 0xc7, 0xf3, 0xc4, 0x8f, 0x8d, 0x9f, 0xbe, 0xe7, 0x55, 0x02, 0x05, 0xb3, 0xe1, 0xdd,
	0x2c, 0x86, 0x9a, 0xcf, 0x59, 0x06, 0x8d, 0x58, 0x72, 0x59, 0xd0, 0xb2, 0x52, 0xb5, 0xf2, 0x1e,
	0x76, 0x6d, 0x6a, 0x83, 0x9d, 0x9a, 0xde, 0xe7, 0xb9, 0x2c, 0x14, 0x33, 0xdf, 0x6e, 0x72, 0xea,
	0x0b, 0xa5, 0x73, 0xa5, 0x59, 0xcc, 0x35, 0x58, 0xb6, 0x19, 0x13, 0xaa, 0x67, 0x9a, 0x3e, 0x48,
	0x55, 0xaa, 0x4c, 0xca, 0xda, 0xac, 0xab, 0x5e, 0x7e, 0x47, 0xf8, 0xee, 0x2b, 0x2b, 0xe9, 0xdd,
	0xc3, 0xae, 0x4c, 0x08, 0x0a, 0x50, 0x38, 0x8c, 0x5c, 0x99, 0x78, 0x04, 0x8f, 0x45, 0x05, 0xbc,
	0x56, 0x15, 0x71, 0x03, 0x14, 0x9e, 0x45, 0x3d, 0xf4, 0x02, 0x3c, 0x49, 0x40, 0x8b, 0x4a, 0x96,
	0xb5, 0x54, 0x05, 0x19, 0x98, 0xee, 0x69, 0xc9, 0x7b, 0x84, 0x47, 0x3c, 0xc9, 0x65, 0xa1, 0xc9,
	0x30, 0x18, 0x84, 0x67, 0x91, 0x45, 0x2d, 0x67, 0xc9, 0xab, 0x5a, 0x82, 0x26, 0x77, 0x4c, 0xa3,
	0x87, 0xde, 0x73, 0x3c, 0x7c, 0x03, 0xa0, 0xc9, 0x38, 0x40, 0xe1, 0x64, 0xfe, 0x84, 0xfe, 0xf3,
	0xe4, 0xb4, 0xff, 0xd9, 0x5b, 0x00, 0x1d, 0x99, 0x85, 0xcb, 0x4f, 0x2e, 0x3e, 0x3f, 0x2d, 0x7b,
	0x1f, 0xf1, 0x38, 0x83, 0x66, 0x51, 0xc1, 0x9a, 0xa0, 0x60, 0x10, 0x4e, 0xe6, 0x8f, 0x69, 0x67,
	0x0e, 0x6d, 0xcd, 0xb1, 0x54, 0x33, 0xfa, 0x42, 0xc9, 0xe2, 0xe6, 0x76, 0xfb, 0xf3, 0xc2, 0xf9,
	0xf6, 0xeb, 0x22, 0x4c, 0x65, 0xbd, 0x7c, 0x1b, 0x53, 0xa1, 0x72, 0x66, 0x9d, 0xec, 0xc2, 0xb5,
	0x4e, 0x32, 0x56, 0x37, 0x25, 0x68, 0xb3, 0xa0, 0xbf, 0x1c, 0x37, 0x57, 0xe7, 0x2b, 0x48, 0xb9,
	0x68, 0x16, 0xad, 0xbd, 0xfa, 0xeb, 0x71, 0x73, 0x85, 0xa2, 0x51, 0x06, 0x4d, 0x04, 0xeb, 0x56,
	0x5b, 0xcb, 0xd4, 0x68, 0xbb, 0xff, 0x4d, 0x5b, 0xcb, 0x34, 0x82, 0xf5, 0x0d, 0xdf, 0xee, 0x7d,
	0xb4, 0xdb, 0xfb, 0xe8, 0xf7, 0xde, 0x47, 0x9f, 0x0f, 0xbe, 0xb3, 0x3b, 0xf8, 0xce, 0x8f, 0x83,
	0xef, 0xbc, 0x7e, 0x79, 0xa2, 0xd0, 0x19, 0x7a, 0x6d, 0xee, 0x5f, 0xa8, 0x95, 0xc5, 0x7f, 0x41,
	0xf6, 0xa1, 0x4f, 0x8c, 0x7c, 0xff, 0x3c, 0xe3, 0x91, 0x99, 0x7b, 0xf6, 0x27, 0x00, 0x00, 0xff,
	0xff, 0x49, 0xf5, 0x8d, 0x96, 0xbe, 0x02, 0x00, 0x00,
}

func (m *Keychain) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Keychain) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Keychain) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Fees != nil {
		{
			size, err := m.Fees.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintKeychain(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Parties) > 0 {
		for iNdEx := len(m.Parties) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Parties[iNdEx])
			copy(dAtA[i:], m.Parties[iNdEx])
			i = encodeVarintKeychain(dAtA, i, uint64(len(m.Parties[iNdEx])))
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.Admins) > 0 {
		for iNdEx := len(m.Admins) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Admins[iNdEx])
			copy(dAtA[i:], m.Admins[iNdEx])
			i = encodeVarintKeychain(dAtA, i, uint64(len(m.Admins[iNdEx])))
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintKeychain(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintKeychain(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintKeychain(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *KeychainFees) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *KeychainFees) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *KeychainFees) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SigReq) > 0 {
		for iNdEx := len(m.SigReq) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SigReq[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintKeychain(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.KeyReq) > 0 {
		for iNdEx := len(m.KeyReq) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.KeyReq[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintKeychain(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintKeychain(dAtA []byte, offset int, v uint64) int {
	offset -= sovKeychain(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Keychain) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovKeychain(uint64(m.Id))
	}
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovKeychain(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovKeychain(uint64(l))
	}
	if len(m.Admins) > 0 {
		for _, s := range m.Admins {
			l = len(s)
			n += 1 + l + sovKeychain(uint64(l))
		}
	}
	if len(m.Parties) > 0 {
		for _, s := range m.Parties {
			l = len(s)
			n += 1 + l + sovKeychain(uint64(l))
		}
	}
	if m.Fees != nil {
		l = m.Fees.Size()
		n += 1 + l + sovKeychain(uint64(l))
	}
	return n
}

func (m *KeychainFees) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.KeyReq) > 0 {
		for _, e := range m.KeyReq {
			l = e.Size()
			n += 1 + l + sovKeychain(uint64(l))
		}
	}
	if len(m.SigReq) > 0 {
		for _, e := range m.SigReq {
			l = e.Size()
			n += 1 + l + sovKeychain(uint64(l))
		}
	}
	return n
}

func sovKeychain(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozKeychain(x uint64) (n int) {
	return sovKeychain(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Keychain) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowKeychain
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Keychain: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Keychain: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKeychain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKeychain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthKeychain
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthKeychain
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKeychain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthKeychain
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthKeychain
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Admins", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKeychain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthKeychain
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthKeychain
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Admins = append(m.Admins, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Parties", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKeychain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthKeychain
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthKeychain
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Parties = append(m.Parties, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fees", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKeychain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthKeychain
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthKeychain
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Fees == nil {
				m.Fees = &KeychainFees{}
			}
			if err := m.Fees.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipKeychain(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthKeychain
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *KeychainFees) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowKeychain
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: KeychainFees: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: KeychainFees: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyReq", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKeychain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthKeychain
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthKeychain
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.KeyReq = append(m.KeyReq, types.Coin{})
			if err := m.KeyReq[len(m.KeyReq)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SigReq", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKeychain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthKeychain
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthKeychain
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SigReq = append(m.SigReq, types.Coin{})
			if err := m.SigReq[len(m.SigReq)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipKeychain(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthKeychain
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipKeychain(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowKeychain
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowKeychain
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowKeychain
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthKeychain
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupKeychain
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthKeychain
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthKeychain        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowKeychain          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupKeychain = fmt.Errorf("proto: unexpected end of group")
)
