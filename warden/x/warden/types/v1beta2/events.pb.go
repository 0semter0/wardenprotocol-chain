// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: warden/warden/v1beta2/events.proto

package v1beta2

import (
	fmt "fmt"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// EventCreateSpace is emitted on Space creation
type EventCreateSpace struct {
	// id of the new space
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// creator is the account address of the space creator
	Creator string `protobuf:"bytes,2,opt,name=creator,proto3" json:"creator,omitempty"`
	// owners_count is the count of the space owners
	OwnersCount uint64 `protobuf:"varint,3,opt,name=owners_count,json=ownersCount,proto3" json:"owners_count,omitempty"`
	// id of the rule to be applied to every admin operation
	AdminRuleId uint64 `protobuf:"varint,4,opt,name=admin_rule_id,json=adminRuleId,proto3" json:"admin_rule_id,omitempty"`
	// id of the rule to be applied to every sign operation
	SignRuleId uint64 `protobuf:"varint,5,opt,name=sign_rule_id,json=signRuleId,proto3" json:"sign_rule_id,omitempty"`
}

func (m *EventCreateSpace) Reset()         { *m = EventCreateSpace{} }
func (m *EventCreateSpace) String() string { return proto.CompactTextString(m) }
func (*EventCreateSpace) ProtoMessage()    {}
func (*EventCreateSpace) Descriptor() ([]byte, []int) {
	return fileDescriptor_d2c33de44ef754ba, []int{0}
}
func (m *EventCreateSpace) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventCreateSpace) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventCreateSpace.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventCreateSpace) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventCreateSpace.Merge(m, src)
}
func (m *EventCreateSpace) XXX_Size() int {
	return m.Size()
}
func (m *EventCreateSpace) XXX_DiscardUnknown() {
	xxx_messageInfo_EventCreateSpace.DiscardUnknown(m)
}

var xxx_messageInfo_EventCreateSpace proto.InternalMessageInfo

func (m *EventCreateSpace) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *EventCreateSpace) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *EventCreateSpace) GetOwnersCount() uint64 {
	if m != nil {
		return m.OwnersCount
	}
	return 0
}

func (m *EventCreateSpace) GetAdminRuleId() uint64 {
	if m != nil {
		return m.AdminRuleId
	}
	return 0
}

func (m *EventCreateSpace) GetSignRuleId() uint64 {
	if m != nil {
		return m.SignRuleId
	}
	return 0
}

// EventUpdateSpace is emitted when Space is updated
type EventUpdateSpace struct {
	// id of the space being updated
	SpaceId uint64 `protobuf:"varint,1,opt,name=space_id,json=spaceId,proto3" json:"space_id,omitempty"`
	// id of the rule to be applied to every admin operation
	AdminRuleId uint64 `protobuf:"varint,2,opt,name=admin_rule_id,json=adminRuleId,proto3" json:"admin_rule_id,omitempty"`
	// id of the rule to be applied to every sign operation
	SignRuleId uint64 `protobuf:"varint,3,opt,name=sign_rule_id,json=signRuleId,proto3" json:"sign_rule_id,omitempty"`
}

func (m *EventUpdateSpace) Reset()         { *m = EventUpdateSpace{} }
func (m *EventUpdateSpace) String() string { return proto.CompactTextString(m) }
func (*EventUpdateSpace) ProtoMessage()    {}
func (*EventUpdateSpace) Descriptor() ([]byte, []int) {
	return fileDescriptor_d2c33de44ef754ba, []int{1}
}
func (m *EventUpdateSpace) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventUpdateSpace) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventUpdateSpace.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventUpdateSpace) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventUpdateSpace.Merge(m, src)
}
func (m *EventUpdateSpace) XXX_Size() int {
	return m.Size()
}
func (m *EventUpdateSpace) XXX_DiscardUnknown() {
	xxx_messageInfo_EventUpdateSpace.DiscardUnknown(m)
}

var xxx_messageInfo_EventUpdateSpace proto.InternalMessageInfo

func (m *EventUpdateSpace) GetSpaceId() uint64 {
	if m != nil {
		return m.SpaceId
	}
	return 0
}

func (m *EventUpdateSpace) GetAdminRuleId() uint64 {
	if m != nil {
		return m.AdminRuleId
	}
	return 0
}

func (m *EventUpdateSpace) GetSignRuleId() uint64 {
	if m != nil {
		return m.SignRuleId
	}
	return 0
}

// EventAddSpaceOwner is emitted when a new owner is added
type EventAddSpaceOwner struct {
	// id of the space being updated
	SpaceId uint64 `protobuf:"varint,1,opt,name=space_id,json=spaceId,proto3" json:"space_id,omitempty"`
	// new_owner is the address of the new space owner
	NewOwner string `protobuf:"bytes,2,opt,name=new_owner,json=newOwner,proto3" json:"new_owner,omitempty"`
	// owners_count is the new count of space owners
	OwnersCount uint64 `protobuf:"varint,3,opt,name=owners_count,json=ownersCount,proto3" json:"owners_count,omitempty"`
}

func (m *EventAddSpaceOwner) Reset()         { *m = EventAddSpaceOwner{} }
func (m *EventAddSpaceOwner) String() string { return proto.CompactTextString(m) }
func (*EventAddSpaceOwner) ProtoMessage()    {}
func (*EventAddSpaceOwner) Descriptor() ([]byte, []int) {
	return fileDescriptor_d2c33de44ef754ba, []int{2}
}
func (m *EventAddSpaceOwner) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventAddSpaceOwner) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventAddSpaceOwner.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventAddSpaceOwner) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventAddSpaceOwner.Merge(m, src)
}
func (m *EventAddSpaceOwner) XXX_Size() int {
	return m.Size()
}
func (m *EventAddSpaceOwner) XXX_DiscardUnknown() {
	xxx_messageInfo_EventAddSpaceOwner.DiscardUnknown(m)
}

var xxx_messageInfo_EventAddSpaceOwner proto.InternalMessageInfo

func (m *EventAddSpaceOwner) GetSpaceId() uint64 {
	if m != nil {
		return m.SpaceId
	}
	return 0
}

func (m *EventAddSpaceOwner) GetNewOwner() string {
	if m != nil {
		return m.NewOwner
	}
	return ""
}

func (m *EventAddSpaceOwner) GetOwnersCount() uint64 {
	if m != nil {
		return m.OwnersCount
	}
	return 0
}

// EventRemoveSpaceOwner is emitted when an owner is removed
type EventRemoveSpaceOwner struct {
	// id of the space being updated
	SpaceId uint64 `protobuf:"varint,1,opt,name=space_id,json=spaceId,proto3" json:"space_id,omitempty"`
	// removed_owner is the address of the removed space owner
	RemovedOwner string `protobuf:"bytes,2,opt,name=removed_owner,json=removedOwner,proto3" json:"removed_owner,omitempty"`
	// owners_count is the new count of space owners
	OwnersCount uint64 `protobuf:"varint,3,opt,name=owners_count,json=ownersCount,proto3" json:"owners_count,omitempty"`
}

func (m *EventRemoveSpaceOwner) Reset()         { *m = EventRemoveSpaceOwner{} }
func (m *EventRemoveSpaceOwner) String() string { return proto.CompactTextString(m) }
func (*EventRemoveSpaceOwner) ProtoMessage()    {}
func (*EventRemoveSpaceOwner) Descriptor() ([]byte, []int) {
	return fileDescriptor_d2c33de44ef754ba, []int{3}
}
func (m *EventRemoveSpaceOwner) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventRemoveSpaceOwner) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventRemoveSpaceOwner.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventRemoveSpaceOwner) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventRemoveSpaceOwner.Merge(m, src)
}
func (m *EventRemoveSpaceOwner) XXX_Size() int {
	return m.Size()
}
func (m *EventRemoveSpaceOwner) XXX_DiscardUnknown() {
	xxx_messageInfo_EventRemoveSpaceOwner.DiscardUnknown(m)
}

var xxx_messageInfo_EventRemoveSpaceOwner proto.InternalMessageInfo

func (m *EventRemoveSpaceOwner) GetSpaceId() uint64 {
	if m != nil {
		return m.SpaceId
	}
	return 0
}

func (m *EventRemoveSpaceOwner) GetRemovedOwner() string {
	if m != nil {
		return m.RemovedOwner
	}
	return ""
}

func (m *EventRemoveSpaceOwner) GetOwnersCount() uint64 {
	if m != nil {
		return m.OwnersCount
	}
	return 0
}

// EventNewKeyRequest is emitted on new key request
type EventNewKeyRequest struct {
	// id of the new key request
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// space_id associated with the key request
	SpaceId uint64 `protobuf:"varint,2,opt,name=space_id,json=spaceId,proto3" json:"space_id,omitempty"`
	// keychain_id associated with the key request
	KeychainId uint64 `protobuf:"varint,3,opt,name=keychain_id,json=keychainId,proto3" json:"keychain_id,omitempty"`
	// id of the rule to be applied to every sign operation for this key
	RuleId uint64 `protobuf:"varint,4,opt,name=rule_id,json=ruleId,proto3" json:"rule_id,omitempty"`
	// the crypto scheme requested for this key
	KeyType KeyType `protobuf:"varint,5,opt,name=key_type,json=keyType,proto3,enum=warden.warden.v1beta2.KeyType" json:"key_type,omitempty"`
	// address of the account that requested the key
	Creator string `protobuf:"bytes,6,opt,name=creator,proto3" json:"creator,omitempty"`
}

func (m *EventNewKeyRequest) Reset()         { *m = EventNewKeyRequest{} }
func (m *EventNewKeyRequest) String() string { return proto.CompactTextString(m) }
func (*EventNewKeyRequest) ProtoMessage()    {}
func (*EventNewKeyRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d2c33de44ef754ba, []int{4}
}
func (m *EventNewKeyRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventNewKeyRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventNewKeyRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventNewKeyRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventNewKeyRequest.Merge(m, src)
}
func (m *EventNewKeyRequest) XXX_Size() int {
	return m.Size()
}
func (m *EventNewKeyRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_EventNewKeyRequest.DiscardUnknown(m)
}

var xxx_messageInfo_EventNewKeyRequest proto.InternalMessageInfo

func (m *EventNewKeyRequest) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *EventNewKeyRequest) GetSpaceId() uint64 {
	if m != nil {
		return m.SpaceId
	}
	return 0
}

func (m *EventNewKeyRequest) GetKeychainId() uint64 {
	if m != nil {
		return m.KeychainId
	}
	return 0
}

func (m *EventNewKeyRequest) GetRuleId() uint64 {
	if m != nil {
		return m.RuleId
	}
	return 0
}

func (m *EventNewKeyRequest) GetKeyType() KeyType {
	if m != nil {
		return m.KeyType
	}
	return KeyType_KEY_TYPE_UNSPECIFIED
}

func (m *EventNewKeyRequest) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

// EventNewKey is emitted when a new Key is created
type EventNewKey struct {
	// id of the new key
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// the crypto scheme used by this key
	KeyType KeyType `protobuf:"varint,2,opt,name=key_type,json=keyType,proto3,enum=warden.warden.v1beta2.KeyType" json:"key_type,omitempty"`
	// space_id associated with the key request
	SpaceId uint64 `protobuf:"varint,3,opt,name=space_id,json=spaceId,proto3" json:"space_id,omitempty"`
	// keychain_id associated with the key request
	KeychainId uint64 `protobuf:"varint,4,opt,name=keychain_id,json=keychainId,proto3" json:"keychain_id,omitempty"`
	// id of the rule to be applied to every sign operation for this key
	RuleId uint64 `protobuf:"varint,5,opt,name=rule_id,json=ruleId,proto3" json:"rule_id,omitempty"`
}

func (m *EventNewKey) Reset()         { *m = EventNewKey{} }
func (m *EventNewKey) String() string { return proto.CompactTextString(m) }
func (*EventNewKey) ProtoMessage()    {}
func (*EventNewKey) Descriptor() ([]byte, []int) {
	return fileDescriptor_d2c33de44ef754ba, []int{5}
}
func (m *EventNewKey) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventNewKey) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventNewKey.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventNewKey) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventNewKey.Merge(m, src)
}
func (m *EventNewKey) XXX_Size() int {
	return m.Size()
}
func (m *EventNewKey) XXX_DiscardUnknown() {
	xxx_messageInfo_EventNewKey.DiscardUnknown(m)
}

var xxx_messageInfo_EventNewKey proto.InternalMessageInfo

func (m *EventNewKey) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *EventNewKey) GetKeyType() KeyType {
	if m != nil {
		return m.KeyType
	}
	return KeyType_KEY_TYPE_UNSPECIFIED
}

func (m *EventNewKey) GetSpaceId() uint64 {
	if m != nil {
		return m.SpaceId
	}
	return 0
}

func (m *EventNewKey) GetKeychainId() uint64 {
	if m != nil {
		return m.KeychainId
	}
	return 0
}

func (m *EventNewKey) GetRuleId() uint64 {
	if m != nil {
		return m.RuleId
	}
	return 0
}

// EventRejectKeyRequest is emitted when a Key request is rejected
type EventRejectKeyRequest struct {
	// id of the key request
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *EventRejectKeyRequest) Reset()         { *m = EventRejectKeyRequest{} }
func (m *EventRejectKeyRequest) String() string { return proto.CompactTextString(m) }
func (*EventRejectKeyRequest) ProtoMessage()    {}
func (*EventRejectKeyRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d2c33de44ef754ba, []int{6}
}
func (m *EventRejectKeyRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventRejectKeyRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventRejectKeyRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventRejectKeyRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventRejectKeyRequest.Merge(m, src)
}
func (m *EventRejectKeyRequest) XXX_Size() int {
	return m.Size()
}
func (m *EventRejectKeyRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_EventRejectKeyRequest.DiscardUnknown(m)
}

var xxx_messageInfo_EventRejectKeyRequest proto.InternalMessageInfo

func (m *EventRejectKeyRequest) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

// EventUpdateKey is emitted when a key is updated
type EventUpdateKey struct {
	// id of the key
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// id of the rule to be applied to every sign operation
	RuleId uint64 `protobuf:"varint,2,opt,name=rule_id,json=ruleId,proto3" json:"rule_id,omitempty"`
}

func (m *EventUpdateKey) Reset()         { *m = EventUpdateKey{} }
func (m *EventUpdateKey) String() string { return proto.CompactTextString(m) }
func (*EventUpdateKey) ProtoMessage()    {}
func (*EventUpdateKey) Descriptor() ([]byte, []int) {
	return fileDescriptor_d2c33de44ef754ba, []int{7}
}
func (m *EventUpdateKey) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventUpdateKey) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventUpdateKey.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventUpdateKey) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventUpdateKey.Merge(m, src)
}
func (m *EventUpdateKey) XXX_Size() int {
	return m.Size()
}
func (m *EventUpdateKey) XXX_DiscardUnknown() {
	xxx_messageInfo_EventUpdateKey.DiscardUnknown(m)
}

var xxx_messageInfo_EventUpdateKey proto.InternalMessageInfo

func (m *EventUpdateKey) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *EventUpdateKey) GetRuleId() uint64 {
	if m != nil {
		return m.RuleId
	}
	return 0
}

// EventNewSignRequest is emitted on new signature requests
type EventNewSignRequest struct {
	// id of the signature request
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// id of the Key to be used for signing
	KeyId uint64 `protobuf:"varint,2,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`
	// address of the account that requested the signature
	Creator string `protobuf:"bytes,3,opt,name=creator,proto3" json:"creator,omitempty"`
}

func (m *EventNewSignRequest) Reset()         { *m = EventNewSignRequest{} }
func (m *EventNewSignRequest) String() string { return proto.CompactTextString(m) }
func (*EventNewSignRequest) ProtoMessage()    {}
func (*EventNewSignRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d2c33de44ef754ba, []int{8}
}
func (m *EventNewSignRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventNewSignRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventNewSignRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventNewSignRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventNewSignRequest.Merge(m, src)
}
func (m *EventNewSignRequest) XXX_Size() int {
	return m.Size()
}
func (m *EventNewSignRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_EventNewSignRequest.DiscardUnknown(m)
}

var xxx_messageInfo_EventNewSignRequest proto.InternalMessageInfo

func (m *EventNewSignRequest) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *EventNewSignRequest) GetKeyId() uint64 {
	if m != nil {
		return m.KeyId
	}
	return 0
}

func (m *EventNewSignRequest) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

// EventRequestNewSignatureFulfilled is emitted when signature request is fulfilled
type EventFulfilSignRequest struct {
	// id of the sign request
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *EventFulfilSignRequest) Reset()         { *m = EventFulfilSignRequest{} }
func (m *EventFulfilSignRequest) String() string { return proto.CompactTextString(m) }
func (*EventFulfilSignRequest) ProtoMessage()    {}
func (*EventFulfilSignRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d2c33de44ef754ba, []int{9}
}
func (m *EventFulfilSignRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventFulfilSignRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventFulfilSignRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventFulfilSignRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventFulfilSignRequest.Merge(m, src)
}
func (m *EventFulfilSignRequest) XXX_Size() int {
	return m.Size()
}
func (m *EventFulfilSignRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_EventFulfilSignRequest.DiscardUnknown(m)
}

var xxx_messageInfo_EventFulfilSignRequest proto.InternalMessageInfo

func (m *EventFulfilSignRequest) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

// EventRejectSignRequest is emitted when a signature request is rejected
type EventRejectSignRequest struct {
	// id of the signature request
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *EventRejectSignRequest) Reset()         { *m = EventRejectSignRequest{} }
func (m *EventRejectSignRequest) String() string { return proto.CompactTextString(m) }
func (*EventRejectSignRequest) ProtoMessage()    {}
func (*EventRejectSignRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d2c33de44ef754ba, []int{10}
}
func (m *EventRejectSignRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventRejectSignRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventRejectSignRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventRejectSignRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventRejectSignRequest.Merge(m, src)
}
func (m *EventRejectSignRequest) XXX_Size() int {
	return m.Size()
}
func (m *EventRejectSignRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_EventRejectSignRequest.DiscardUnknown(m)
}

var xxx_messageInfo_EventRejectSignRequest proto.InternalMessageInfo

func (m *EventRejectSignRequest) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

// EventNewKeychain is emitted on Keychain creation
type EventNewKeychain struct {
	// id of the new keychain
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// address of the account that created the keychain
	Creator string `protobuf:"bytes,2,opt,name=creator,proto3" json:"creator,omitempty"`
	// amount of charging fees for key and signature requests
	KeychainFees *KeychainFees `protobuf:"bytes,3,opt,name=keychain_fees,json=keychainFees,proto3" json:"keychain_fees,omitempty"`
}

func (m *EventNewKeychain) Reset()         { *m = EventNewKeychain{} }
func (m *EventNewKeychain) String() string { return proto.CompactTextString(m) }
func (*EventNewKeychain) ProtoMessage()    {}
func (*EventNewKeychain) Descriptor() ([]byte, []int) {
	return fileDescriptor_d2c33de44ef754ba, []int{11}
}
func (m *EventNewKeychain) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventNewKeychain) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventNewKeychain.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventNewKeychain) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventNewKeychain.Merge(m, src)
}
func (m *EventNewKeychain) XXX_Size() int {
	return m.Size()
}
func (m *EventNewKeychain) XXX_DiscardUnknown() {
	xxx_messageInfo_EventNewKeychain.DiscardUnknown(m)
}

var xxx_messageInfo_EventNewKeychain proto.InternalMessageInfo

func (m *EventNewKeychain) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *EventNewKeychain) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *EventNewKeychain) GetKeychainFees() *KeychainFees {
	if m != nil {
		return m.KeychainFees
	}
	return nil
}

// EventUpdateKeychain is emitted when a Keychain is updated
type EventUpdateKeychain struct {
	// id of the keychain
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// amount of charging fees for key and signature requests
	KeychainFees *KeychainFees `protobuf:"bytes,2,opt,name=keychain_fees,json=keychainFees,proto3" json:"keychain_fees,omitempty"`
}

func (m *EventUpdateKeychain) Reset()         { *m = EventUpdateKeychain{} }
func (m *EventUpdateKeychain) String() string { return proto.CompactTextString(m) }
func (*EventUpdateKeychain) ProtoMessage()    {}
func (*EventUpdateKeychain) Descriptor() ([]byte, []int) {
	return fileDescriptor_d2c33de44ef754ba, []int{12}
}
func (m *EventUpdateKeychain) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventUpdateKeychain) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventUpdateKeychain.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventUpdateKeychain) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventUpdateKeychain.Merge(m, src)
}
func (m *EventUpdateKeychain) XXX_Size() int {
	return m.Size()
}
func (m *EventUpdateKeychain) XXX_DiscardUnknown() {
	xxx_messageInfo_EventUpdateKeychain.DiscardUnknown(m)
}

var xxx_messageInfo_EventUpdateKeychain proto.InternalMessageInfo

func (m *EventUpdateKeychain) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *EventUpdateKeychain) GetKeychainFees() *KeychainFees {
	if m != nil {
		return m.KeychainFees
	}
	return nil
}

// EventAddKeychainWriter is emitted when a new writer address is added to a Keychain
type EventAddKeychainWriter struct {
	// id of the keychain
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// address of the new writer
	NewWriter string `protobuf:"bytes,2,opt,name=new_writer,json=newWriter,proto3" json:"new_writer,omitempty"`
	// updated count of writers
	WritersCount uint64 `protobuf:"varint,3,opt,name=writers_count,json=writersCount,proto3" json:"writers_count,omitempty"`
}

func (m *EventAddKeychainWriter) Reset()         { *m = EventAddKeychainWriter{} }
func (m *EventAddKeychainWriter) String() string { return proto.CompactTextString(m) }
func (*EventAddKeychainWriter) ProtoMessage()    {}
func (*EventAddKeychainWriter) Descriptor() ([]byte, []int) {
	return fileDescriptor_d2c33de44ef754ba, []int{13}
}
func (m *EventAddKeychainWriter) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventAddKeychainWriter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventAddKeychainWriter.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventAddKeychainWriter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventAddKeychainWriter.Merge(m, src)
}
func (m *EventAddKeychainWriter) XXX_Size() int {
	return m.Size()
}
func (m *EventAddKeychainWriter) XXX_DiscardUnknown() {
	xxx_messageInfo_EventAddKeychainWriter.DiscardUnknown(m)
}

var xxx_messageInfo_EventAddKeychainWriter proto.InternalMessageInfo

func (m *EventAddKeychainWriter) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *EventAddKeychainWriter) GetNewWriter() string {
	if m != nil {
		return m.NewWriter
	}
	return ""
}

func (m *EventAddKeychainWriter) GetWritersCount() uint64 {
	if m != nil {
		return m.WritersCount
	}
	return 0
}

func init() {
	proto.RegisterType((*EventCreateSpace)(nil), "warden.warden.v1beta2.EventCreateSpace")
	proto.RegisterType((*EventUpdateSpace)(nil), "warden.warden.v1beta2.EventUpdateSpace")
	proto.RegisterType((*EventAddSpaceOwner)(nil), "warden.warden.v1beta2.EventAddSpaceOwner")
	proto.RegisterType((*EventRemoveSpaceOwner)(nil), "warden.warden.v1beta2.EventRemoveSpaceOwner")
	proto.RegisterType((*EventNewKeyRequest)(nil), "warden.warden.v1beta2.EventNewKeyRequest")
	proto.RegisterType((*EventNewKey)(nil), "warden.warden.v1beta2.EventNewKey")
	proto.RegisterType((*EventRejectKeyRequest)(nil), "warden.warden.v1beta2.EventRejectKeyRequest")
	proto.RegisterType((*EventUpdateKey)(nil), "warden.warden.v1beta2.EventUpdateKey")
	proto.RegisterType((*EventNewSignRequest)(nil), "warden.warden.v1beta2.EventNewSignRequest")
	proto.RegisterType((*EventFulfilSignRequest)(nil), "warden.warden.v1beta2.EventFulfilSignRequest")
	proto.RegisterType((*EventRejectSignRequest)(nil), "warden.warden.v1beta2.EventRejectSignRequest")
	proto.RegisterType((*EventNewKeychain)(nil), "warden.warden.v1beta2.EventNewKeychain")
	proto.RegisterType((*EventUpdateKeychain)(nil), "warden.warden.v1beta2.EventUpdateKeychain")
	proto.RegisterType((*EventAddKeychainWriter)(nil), "warden.warden.v1beta2.EventAddKeychainWriter")
}

func init() {
	proto.RegisterFile("warden/warden/v1beta2/events.proto", fileDescriptor_d2c33de44ef754ba)
}

var fileDescriptor_d2c33de44ef754ba = []byte{
	// 632 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x55, 0xcd, 0x6e, 0xd3, 0x40,
	0x10, 0xae, 0x9d, 0x36, 0x69, 0x27, 0x3f, 0x42, 0x46, 0x81, 0x50, 0x84, 0x1b, 0x1c, 0x24, 0x72,
	0x21, 0x11, 0xe1, 0xd4, 0x63, 0xa9, 0x28, 0x44, 0x95, 0x40, 0x72, 0xf9, 0x91, 0xb8, 0x58, 0x8e,
	0x77, 0xda, 0x9a, 0x38, 0x76, 0xf0, 0x4f, 0x8c, 0x79, 0x00, 0xce, 0xbc, 0x04, 0x47, 0xde, 0x83,
	0x13, 0xea, 0x91, 0x23, 0x4a, 0x5e, 0x04, 0x79, 0x77, 0x6d, 0x6c, 0x9c, 0xa4, 0x2d, 0x27, 0xef,
	0xce, 0x7e, 0xe3, 0x6f, 0xe6, 0x9b, 0xd9, 0x59, 0x50, 0x42, 0xdd, 0x25, 0x68, 0xf7, 0xf9, 0x67,
	0xf6, 0x78, 0x84, 0xbe, 0x3e, 0xe8, 0xe3, 0x0c, 0x6d, 0xdf, 0xeb, 0x4d, 0x5d, 0xc7, 0x77, 0xa4,
	0x26, 0x3b, 0xec, 0xf1, 0x0f, 0xc7, 0xec, 0xee, 0x2d, 0x77, 0x1d, 0x63, 0xc4, 0xfc, 0x76, 0x1f,
	0xac, 0x04, 0x18, 0xe7, 0xba, 0x69, 0x33, 0x94, 0xf2, 0x4d, 0x80, 0x1b, 0xcf, 0x62, 0xba, 0x43,
	0x17, 0x75, 0x1f, 0x4f, 0xa6, 0xba, 0x81, 0x52, 0x03, 0x44, 0x93, 0xb4, 0x84, 0xb6, 0xd0, 0xdd,
	0x54, 0x45, 0x93, 0x48, 0x2d, 0xa8, 0x18, 0xf1, 0xb1, 0xe3, 0xb6, 0xc4, 0xb6, 0xd0, 0xdd, 0x51,
	0x93, 0xad, 0x74, 0x1f, 0x6a, 0x4e, 0x68, 0xa3, 0xeb, 0x69, 0x86, 0x13, 0xd8, 0x7e, 0xab, 0x44,
	0x7d, 0xaa, 0xcc, 0x76, 0x18, 0x9b, 0x24, 0x05, 0xea, 0x3a, 0x99, 0x98, 0xb6, 0xe6, 0x06, 0x16,
	0x6a, 0x26, 0x69, 0x6d, 0x32, 0x0c, 0x35, 0xaa, 0x81, 0x85, 0x43, 0x22, 0xb5, 0xa1, 0xe6, 0x99,
	0x67, 0x7f, 0x21, 0x5b, 0x14, 0x02, 0xb1, 0x8d, 0x21, 0x14, 0x8f, 0x87, 0xf9, 0x66, 0x4a, 0xd2,
	0x30, 0xef, 0xc0, 0xb6, 0x17, 0x2f, 0xb4, 0x34, 0xd8, 0x0a, 0xdd, 0x0f, 0x49, 0x91, 0x54, 0xbc,
	0x9c, 0xb4, 0x54, 0x20, 0x75, 0x40, 0xa2, 0xa4, 0x07, 0x84, 0x50, 0xc6, 0x57, 0x71, 0x5a, 0xeb,
	0x68, 0xef, 0xc2, 0x8e, 0x8d, 0xa1, 0x46, 0xd3, 0xe7, 0x52, 0x6d, 0xdb, 0x18, 0x32, 0xbf, 0xcb,
	0xb5, 0x52, 0x3e, 0x43, 0x93, 0x12, 0xaa, 0x38, 0x71, 0x66, 0x78, 0x35, 0xce, 0x0e, 0xd4, 0x5d,
	0x0a, 0x27, 0x39, 0xde, 0x1a, 0x37, 0x5e, 0x99, 0xfb, 0xa7, 0xc0, 0xb3, 0x7d, 0x89, 0xe1, 0x31,
	0x46, 0x2a, 0x7e, 0x0c, 0xd0, 0xf3, 0x0b, 0xbd, 0x90, 0x8d, 0x44, 0xcc, 0x47, 0xb2, 0x07, 0xd5,
	0xa4, 0xbb, 0x32, 0x7a, 0x26, 0xa6, 0x21, 0x91, 0x6e, 0x43, 0x25, 0xdf, 0x04, 0x65, 0x97, 0x95,
	0x62, 0x1f, 0xb6, 0xc7, 0x18, 0x69, 0x7e, 0x34, 0x45, 0x5a, 0xfb, 0xc6, 0x40, 0xee, 0x2d, 0x6d,
	0xfb, 0xde, 0x31, 0x46, 0xaf, 0xa3, 0x29, 0xaa, 0x95, 0x31, 0x5b, 0x64, 0x7b, 0xb3, 0x9c, 0xeb,
	0x4d, 0xe5, 0xbb, 0x00, 0xd5, 0x4c, 0x42, 0x85, 0x4c, 0xb2, 0xa4, 0xe2, 0xf5, 0x48, 0xb3, 0x22,
	0x94, 0xd6, 0x8a, 0xb0, 0xb9, 0x4e, 0x84, 0xad, 0xac, 0x08, 0xca, 0xc3, 0xb4, 0xf8, 0x1f, 0xd0,
	0xf0, 0x57, 0x97, 0x40, 0xd9, 0x87, 0x46, 0xe6, 0x2e, 0x2c, 0x4b, 0x2d, 0xc3, 0x21, 0xe6, 0x38,
	0xde, 0xc2, 0xcd, 0x44, 0x92, 0x93, 0xb8, 0xcf, 0x57, 0x14, 0xb9, 0x09, 0xe5, 0x58, 0x9a, 0xd4,
	0x7d, 0x6b, 0x8c, 0xd1, 0x30, 0x37, 0x07, 0x4a, 0x79, 0xad, 0xbb, 0x70, 0x8b, 0xfe, 0xf7, 0x28,
	0xb0, 0x4e, 0x4d, 0x6b, 0xcd, 0xaf, 0x53, 0x24, 0xcb, 0x72, 0x1d, 0xf2, 0x4b, 0x32, 0x9a, 0x58,
	0xfd, 0xa8, 0x7e, 0xd7, 0x18, 0x4d, 0x2f, 0xa0, 0x9e, 0x16, 0xe2, 0x14, 0xd1, 0xa3, 0x21, 0x57,
	0x07, 0x9d, 0xd5, 0x35, 0xa6, 0xd8, 0x23, 0x44, 0x4f, 0xad, 0x8d, 0x33, 0x3b, 0xc5, 0xe1, 0xa2,
	0xa5, 0x7a, 0x2f, 0x0f, 0xa5, 0x40, 0x28, 0xfe, 0x2f, 0xa1, 0xc5, 0x35, 0x3a, 0x20, 0x24, 0x41,
	0xbd, 0x73, 0x4d, 0x1f, 0xdd, 0x02, 0xe7, 0x3d, 0x80, 0x78, 0xe0, 0x84, 0xf4, 0x94, 0x2b, 0x10,
	0x8f, 0x20, 0x0e, 0xef, 0x40, 0x9d, 0x1d, 0xe5, 0xef, 0x7d, 0x8d, 0x1b, 0xe9, 0xc5, 0x7f, 0xaa,
	0xff, 0x98, 0xcb, 0xc2, 0xc5, 0x5c, 0x16, 0x7e, 0xcf, 0x65, 0xe1, 0xeb, 0x42, 0xde, 0xb8, 0x58,
	0xc8, 0x1b, 0xbf, 0x16, 0xf2, 0xc6, 0xfb, 0xe7, 0x67, 0xa6, 0x7f, 0x1e, 0x8c, 0x7a, 0x86, 0x33,
	0xe1, 0xcf, 0xc8, 0x23, 0xfa, 0x6a, 0x18, 0x8e, 0xc5, 0xf7, 0xff, 0x6c, 0xfb, 0x9f, 0x92, 0x45,
	0x7c, 0xab, 0xbc, 0xe4, 0xd1, 0x19, 0x95, 0x29, 0xee, 0xc9, 0x9f, 0x00, 0x00, 0x00, 0xff, 0xff,
	0x3c, 0xde, 0xce, 0x56, 0xf0, 0x06, 0x00, 0x00,
}

func (m *EventCreateSpace) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventCreateSpace) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventCreateSpace) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SignRuleId != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.SignRuleId))
		i--
		dAtA[i] = 0x28
	}
	if m.AdminRuleId != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.AdminRuleId))
		i--
		dAtA[i] = 0x20
	}
	if m.OwnersCount != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.OwnersCount))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *EventUpdateSpace) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventUpdateSpace) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventUpdateSpace) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SignRuleId != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.SignRuleId))
		i--
		dAtA[i] = 0x18
	}
	if m.AdminRuleId != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.AdminRuleId))
		i--
		dAtA[i] = 0x10
	}
	if m.SpaceId != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.SpaceId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *EventAddSpaceOwner) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventAddSpaceOwner) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventAddSpaceOwner) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.OwnersCount != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.OwnersCount))
		i--
		dAtA[i] = 0x18
	}
	if len(m.NewOwner) > 0 {
		i -= len(m.NewOwner)
		copy(dAtA[i:], m.NewOwner)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.NewOwner)))
		i--
		dAtA[i] = 0x12
	}
	if m.SpaceId != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.SpaceId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *EventRemoveSpaceOwner) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventRemoveSpaceOwner) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventRemoveSpaceOwner) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.OwnersCount != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.OwnersCount))
		i--
		dAtA[i] = 0x18
	}
	if len(m.RemovedOwner) > 0 {
		i -= len(m.RemovedOwner)
		copy(dAtA[i:], m.RemovedOwner)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.RemovedOwner)))
		i--
		dAtA[i] = 0x12
	}
	if m.SpaceId != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.SpaceId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *EventNewKeyRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventNewKeyRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventNewKeyRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0x32
	}
	if m.KeyType != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.KeyType))
		i--
		dAtA[i] = 0x28
	}
	if m.RuleId != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.RuleId))
		i--
		dAtA[i] = 0x20
	}
	if m.KeychainId != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.KeychainId))
		i--
		dAtA[i] = 0x18
	}
	if m.SpaceId != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.SpaceId))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *EventNewKey) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventNewKey) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventNewKey) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.RuleId != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.RuleId))
		i--
		dAtA[i] = 0x28
	}
	if m.KeychainId != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.KeychainId))
		i--
		dAtA[i] = 0x20
	}
	if m.SpaceId != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.SpaceId))
		i--
		dAtA[i] = 0x18
	}
	if m.KeyType != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.KeyType))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *EventRejectKeyRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventRejectKeyRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventRejectKeyRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *EventUpdateKey) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventUpdateKey) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventUpdateKey) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.RuleId != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.RuleId))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *EventNewSignRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventNewSignRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventNewSignRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0x1a
	}
	if m.KeyId != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.KeyId))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *EventFulfilSignRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventFulfilSignRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventFulfilSignRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *EventRejectSignRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventRejectSignRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventRejectSignRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *EventNewKeychain) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventNewKeychain) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventNewKeychain) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.KeychainFees != nil {
		{
			size, err := m.KeychainFees.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEvents(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *EventUpdateKeychain) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventUpdateKeychain) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventUpdateKeychain) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.KeychainFees != nil {
		{
			size, err := m.KeychainFees.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEvents(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *EventAddKeychainWriter) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventAddKeychainWriter) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventAddKeychainWriter) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.WritersCount != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.WritersCount))
		i--
		dAtA[i] = 0x18
	}
	if len(m.NewWriter) > 0 {
		i -= len(m.NewWriter)
		copy(dAtA[i:], m.NewWriter)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.NewWriter)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintEvents(dAtA []byte, offset int, v uint64) int {
	offset -= sovEvents(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *EventCreateSpace) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovEvents(uint64(m.Id))
	}
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.OwnersCount != 0 {
		n += 1 + sovEvents(uint64(m.OwnersCount))
	}
	if m.AdminRuleId != 0 {
		n += 1 + sovEvents(uint64(m.AdminRuleId))
	}
	if m.SignRuleId != 0 {
		n += 1 + sovEvents(uint64(m.SignRuleId))
	}
	return n
}

func (m *EventUpdateSpace) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SpaceId != 0 {
		n += 1 + sovEvents(uint64(m.SpaceId))
	}
	if m.AdminRuleId != 0 {
		n += 1 + sovEvents(uint64(m.AdminRuleId))
	}
	if m.SignRuleId != 0 {
		n += 1 + sovEvents(uint64(m.SignRuleId))
	}
	return n
}

func (m *EventAddSpaceOwner) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SpaceId != 0 {
		n += 1 + sovEvents(uint64(m.SpaceId))
	}
	l = len(m.NewOwner)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.OwnersCount != 0 {
		n += 1 + sovEvents(uint64(m.OwnersCount))
	}
	return n
}

func (m *EventRemoveSpaceOwner) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SpaceId != 0 {
		n += 1 + sovEvents(uint64(m.SpaceId))
	}
	l = len(m.RemovedOwner)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.OwnersCount != 0 {
		n += 1 + sovEvents(uint64(m.OwnersCount))
	}
	return n
}

func (m *EventNewKeyRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovEvents(uint64(m.Id))
	}
	if m.SpaceId != 0 {
		n += 1 + sovEvents(uint64(m.SpaceId))
	}
	if m.KeychainId != 0 {
		n += 1 + sovEvents(uint64(m.KeychainId))
	}
	if m.RuleId != 0 {
		n += 1 + sovEvents(uint64(m.RuleId))
	}
	if m.KeyType != 0 {
		n += 1 + sovEvents(uint64(m.KeyType))
	}
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func (m *EventNewKey) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovEvents(uint64(m.Id))
	}
	if m.KeyType != 0 {
		n += 1 + sovEvents(uint64(m.KeyType))
	}
	if m.SpaceId != 0 {
		n += 1 + sovEvents(uint64(m.SpaceId))
	}
	if m.KeychainId != 0 {
		n += 1 + sovEvents(uint64(m.KeychainId))
	}
	if m.RuleId != 0 {
		n += 1 + sovEvents(uint64(m.RuleId))
	}
	return n
}

func (m *EventRejectKeyRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovEvents(uint64(m.Id))
	}
	return n
}

func (m *EventUpdateKey) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovEvents(uint64(m.Id))
	}
	if m.RuleId != 0 {
		n += 1 + sovEvents(uint64(m.RuleId))
	}
	return n
}

func (m *EventNewSignRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovEvents(uint64(m.Id))
	}
	if m.KeyId != 0 {
		n += 1 + sovEvents(uint64(m.KeyId))
	}
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func (m *EventFulfilSignRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovEvents(uint64(m.Id))
	}
	return n
}

func (m *EventRejectSignRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovEvents(uint64(m.Id))
	}
	return n
}

func (m *EventNewKeychain) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovEvents(uint64(m.Id))
	}
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.KeychainFees != nil {
		l = m.KeychainFees.Size()
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func (m *EventUpdateKeychain) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovEvents(uint64(m.Id))
	}
	if m.KeychainFees != nil {
		l = m.KeychainFees.Size()
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func (m *EventAddKeychainWriter) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovEvents(uint64(m.Id))
	}
	l = len(m.NewWriter)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.WritersCount != 0 {
		n += 1 + sovEvents(uint64(m.WritersCount))
	}
	return n
}

func sovEvents(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozEvents(x uint64) (n int) {
	return sovEvents(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *EventCreateSpace) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventCreateSpace: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventCreateSpace: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OwnersCount", wireType)
			}
			m.OwnersCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OwnersCount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdminRuleId", wireType)
			}
			m.AdminRuleId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AdminRuleId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SignRuleId", wireType)
			}
			m.SignRuleId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SignRuleId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventUpdateSpace) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventUpdateSpace: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventUpdateSpace: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpaceId", wireType)
			}
			m.SpaceId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SpaceId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdminRuleId", wireType)
			}
			m.AdminRuleId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AdminRuleId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SignRuleId", wireType)
			}
			m.SignRuleId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SignRuleId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventAddSpaceOwner) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventAddSpaceOwner: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventAddSpaceOwner: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpaceId", wireType)
			}
			m.SpaceId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SpaceId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewOwner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NewOwner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OwnersCount", wireType)
			}
			m.OwnersCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OwnersCount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventRemoveSpaceOwner) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventRemoveSpaceOwner: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventRemoveSpaceOwner: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpaceId", wireType)
			}
			m.SpaceId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SpaceId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RemovedOwner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RemovedOwner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OwnersCount", wireType)
			}
			m.OwnersCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OwnersCount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventNewKeyRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventNewKeyRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventNewKeyRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpaceId", wireType)
			}
			m.SpaceId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SpaceId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeychainId", wireType)
			}
			m.KeychainId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KeychainId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RuleId", wireType)
			}
			m.RuleId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RuleId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyType", wireType)
			}
			m.KeyType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KeyType |= KeyType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventNewKey) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventNewKey: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventNewKey: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyType", wireType)
			}
			m.KeyType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KeyType |= KeyType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpaceId", wireType)
			}
			m.SpaceId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SpaceId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeychainId", wireType)
			}
			m.KeychainId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KeychainId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RuleId", wireType)
			}
			m.RuleId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RuleId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventRejectKeyRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventRejectKeyRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventRejectKeyRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventUpdateKey) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventUpdateKey: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventUpdateKey: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RuleId", wireType)
			}
			m.RuleId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RuleId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventNewSignRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventNewSignRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventNewSignRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyId", wireType)
			}
			m.KeyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KeyId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventFulfilSignRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventFulfilSignRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventFulfilSignRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventRejectSignRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventRejectSignRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventRejectSignRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventNewKeychain) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventNewKeychain: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventNewKeychain: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeychainFees", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.KeychainFees == nil {
				m.KeychainFees = &KeychainFees{}
			}
			if err := m.KeychainFees.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventUpdateKeychain) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventUpdateKeychain: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventUpdateKeychain: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeychainFees", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.KeychainFees == nil {
				m.KeychainFees = &KeychainFees{}
			}
			if err := m.KeychainFees.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventAddKeychainWriter) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventAddKeychainWriter: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventAddKeychainWriter: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewWriter", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NewWriter = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WritersCount", wireType)
			}
			m.WritersCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WritersCount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipEvents(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthEvents
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupEvents
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthEvents
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthEvents        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowEvents          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupEvents = fmt.Errorf("proto: unexpected end of group")
)
