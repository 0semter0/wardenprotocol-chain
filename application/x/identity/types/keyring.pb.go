// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: fusionchain/identity/keyring.proto

package types

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Keyring struct {
	Id          uint64   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Creator     string   `protobuf:"bytes,2,opt,name=creator,proto3" json:"creator,omitempty"`
	Description string   `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	Admins      []string `protobuf:"bytes,4,rep,name=admins,proto3" json:"admins,omitempty"`
	Parties     []string `protobuf:"bytes,5,rep,name=parties,proto3" json:"parties,omitempty"`
}

func (m *Keyring) Reset()         { *m = Keyring{} }
func (m *Keyring) String() string { return proto.CompactTextString(m) }
func (*Keyring) ProtoMessage()    {}
func (*Keyring) Descriptor() ([]byte, []int) {
	return fileDescriptor_5a6775396e8348ed, []int{0}
}
func (m *Keyring) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Keyring) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Keyring.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Keyring) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Keyring.Merge(m, src)
}
func (m *Keyring) XXX_Size() int {
	return m.Size()
}
func (m *Keyring) XXX_DiscardUnknown() {
	xxx_messageInfo_Keyring.DiscardUnknown(m)
}

var xxx_messageInfo_Keyring proto.InternalMessageInfo

func (m *Keyring) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Keyring) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *Keyring) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Keyring) GetAdmins() []string {
	if m != nil {
		return m.Admins
	}
	return nil
}

func (m *Keyring) GetParties() []string {
	if m != nil {
		return m.Parties
	}
	return nil
}

func init() {
	proto.RegisterType((*Keyring)(nil), "fusionchain.identity.Keyring")
}

func init() {
	proto.RegisterFile("fusionchain/identity/keyring.proto", fileDescriptor_5a6775396e8348ed)
}

var fileDescriptor_5a6775396e8348ed = []byte{
	// 231 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x4c, 0x8f, 0xb1, 0x4e, 0xc3, 0x30,
	0x10, 0x86, 0xe3, 0xb4, 0xb4, 0xaa, 0x91, 0x18, 0x2c, 0x84, 0x3c, 0x59, 0x51, 0xa7, 0x4c, 0xc9,
	0xc0, 0xc0, 0xce, 0xca, 0x44, 0x46, 0x36, 0x37, 0x36, 0xe5, 0x04, 0xf5, 0xa5, 0xe7, 0x43, 0x22,
	0x4f, 0xc0, 0xca, 0x63, 0x31, 0x76, 0x64, 0x44, 0xc9, 0x8b, 0x20, 0x12, 0x22, 0x32, 0x7e, 0xf7,
	0x7f, 0x3a, 0xe9, 0x93, 0xdb, 0xc7, 0xd7, 0x08, 0x18, 0xea, 0x27, 0x0b, 0xa1, 0x04, 0xe7, 0x03,
	0x03, 0xb7, 0xe5, 0xb3, 0x6f, 0x09, 0xc2, 0xbe, 0x68, 0x08, 0x19, 0xd5, 0xe5, 0xcc, 0x29, 0x26,
	0x67, 0xfb, 0x2e, 0xe4, 0xfa, 0x6e, 0xf4, 0xd4, 0x85, 0x4c, 0xc1, 0x69, 0x91, 0x89, 0x7c, 0x59,
	0xa5, 0xe0, 0x94, 0x96, 0xeb, 0x9a, 0xbc, 0x65, 0x24, 0x9d, 0x66, 0x22, 0xdf, 0x54, 0x13, 0xaa,
	0x4c, 0x9e, 0x3b, 0x1f, 0x6b, 0x82, 0x86, 0x01, 0x83, 0x5e, 0x0c, 0xeb, 0xfc, 0xa4, 0xae, 0xe4,
	0xca, 0xba, 0x03, 0x84, 0xa8, 0x97, 0xd9, 0x22, 0xdf, 0x54, 0x7f, 0xf4, 0xfb, 0xb3, 0xb1, 0xc4,
	0xe0, 0xa3, 0x3e, 0x1b, 0x86, 0x09, 0x6f, 0xef, 0x3f, 0x3b, 0x23, 0x4e, 0x9d, 0x11, 0xdf, 0x9d,
	0x11, 0x1f, 0xbd, 0x49, 0x4e, 0xbd, 0x49, 0xbe, 0x7a, 0x93, 0x3c, 0xdc, 0xec, 0x81, 0x5f, 0xec,
	0xae, 0x38, 0x92, 0x77, 0x58, 0xd4, 0x78, 0x28, 0x8f, 0xe4, 0x70, 0x8c, 0x9d, 0x87, 0xbf, 0xfd,
	0xa7, 0x73, 0xdb, 0xf8, 0xb8, 0x5b, 0x0d, 0xe5, 0xd7, 0x3f, 0x01, 0x00, 0x00, 0xff, 0xff, 0xe0,
	0xc5, 0x2d, 0x35, 0x1f, 0x01, 0x00, 0x00,
}

func (m *Keyring) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Keyring) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Keyring) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Parties) > 0 {
		for iNdEx := len(m.Parties) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Parties[iNdEx])
			copy(dAtA[i:], m.Parties[iNdEx])
			i = encodeVarintKeyring(dAtA, i, uint64(len(m.Parties[iNdEx])))
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.Admins) > 0 {
		for iNdEx := len(m.Admins) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Admins[iNdEx])
			copy(dAtA[i:], m.Admins[iNdEx])
			i = encodeVarintKeyring(dAtA, i, uint64(len(m.Admins[iNdEx])))
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintKeyring(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintKeyring(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintKeyring(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintKeyring(dAtA []byte, offset int, v uint64) int {
	offset -= sovKeyring(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Keyring) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovKeyring(uint64(m.Id))
	}
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovKeyring(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovKeyring(uint64(l))
	}
	if len(m.Admins) > 0 {
		for _, s := range m.Admins {
			l = len(s)
			n += 1 + l + sovKeyring(uint64(l))
		}
	}
	if len(m.Parties) > 0 {
		for _, s := range m.Parties {
			l = len(s)
			n += 1 + l + sovKeyring(uint64(l))
		}
	}
	return n
}

func sovKeyring(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozKeyring(x uint64) (n int) {
	return sovKeyring(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Keyring) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowKeyring
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Keyring: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Keyring: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKeyring
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKeyring
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthKeyring
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthKeyring
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKeyring
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthKeyring
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthKeyring
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Admins", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKeyring
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthKeyring
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthKeyring
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Admins = append(m.Admins, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Parties", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKeyring
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthKeyring
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthKeyring
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Parties = append(m.Parties, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipKeyring(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthKeyring
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipKeyring(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowKeyring
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowKeyring
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowKeyring
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthKeyring
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupKeyring
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthKeyring
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthKeyring        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowKeyring          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupKeyring = fmt.Errorf("proto: unexpected end of group")
)
