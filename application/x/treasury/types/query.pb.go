// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: fusionchain/treasury/query.proto

package types

import (
	context "context"
	fmt "fmt"
	query "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryParamsRequest is request type for the Query/Params RPC method.
type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_dfc42e3ec3cc822d, []int{0}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

// QueryParamsResponse is response type for the Query/Params RPC method.
type QueryParamsResponse struct {
	// params holds all the parameters of this module.
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_dfc42e3ec3cc822d, []int{1}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

type QueryKeyRequestsRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
	// Types that are valid to be assigned to XStatus:
	//	*QueryKeyRequestsRequest_Status
	XStatus isQueryKeyRequestsRequest_XStatus `protobuf_oneof:"_status"`
}

func (m *QueryKeyRequestsRequest) Reset()         { *m = QueryKeyRequestsRequest{} }
func (m *QueryKeyRequestsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryKeyRequestsRequest) ProtoMessage()    {}
func (*QueryKeyRequestsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_dfc42e3ec3cc822d, []int{2}
}
func (m *QueryKeyRequestsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryKeyRequestsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryKeyRequestsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryKeyRequestsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryKeyRequestsRequest.Merge(m, src)
}
func (m *QueryKeyRequestsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryKeyRequestsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryKeyRequestsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryKeyRequestsRequest proto.InternalMessageInfo

type isQueryKeyRequestsRequest_XStatus interface {
	isQueryKeyRequestsRequest_XStatus()
	MarshalTo([]byte) (int, error)
	Size() int
}

type QueryKeyRequestsRequest_Status struct {
	Status KeyRequestStatus `protobuf:"varint,2,opt,name=status,proto3,enum=fusionchain.treasury.KeyRequestStatus,oneof" json:"status,omitempty"`
}

func (*QueryKeyRequestsRequest_Status) isQueryKeyRequestsRequest_XStatus() {}

func (m *QueryKeyRequestsRequest) GetXStatus() isQueryKeyRequestsRequest_XStatus {
	if m != nil {
		return m.XStatus
	}
	return nil
}

func (m *QueryKeyRequestsRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

func (m *QueryKeyRequestsRequest) GetStatus() KeyRequestStatus {
	if x, ok := m.GetXStatus().(*QueryKeyRequestsRequest_Status); ok {
		return x.Status
	}
	return KeyRequestStatus_KEY_REQUEST_STATUS_UNSPECIFIED
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*QueryKeyRequestsRequest) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*QueryKeyRequestsRequest_Status)(nil),
	}
}

type QueryKeyRequestsResponse struct {
	Pagination  *query.PageResponse `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
	KeyRequests []*KeyRequest       `protobuf:"bytes,2,rep,name=key_requests,json=keyRequests,proto3" json:"key_requests,omitempty"`
}

func (m *QueryKeyRequestsResponse) Reset()         { *m = QueryKeyRequestsResponse{} }
func (m *QueryKeyRequestsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryKeyRequestsResponse) ProtoMessage()    {}
func (*QueryKeyRequestsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_dfc42e3ec3cc822d, []int{3}
}
func (m *QueryKeyRequestsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryKeyRequestsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryKeyRequestsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryKeyRequestsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryKeyRequestsResponse.Merge(m, src)
}
func (m *QueryKeyRequestsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryKeyRequestsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryKeyRequestsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryKeyRequestsResponse proto.InternalMessageInfo

func (m *QueryKeyRequestsResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

func (m *QueryKeyRequestsResponse) GetKeyRequests() []*KeyRequest {
	if m != nil {
		return m.KeyRequests
	}
	return nil
}

type QueryKeyRequestByIdRequest struct {
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *QueryKeyRequestByIdRequest) Reset()         { *m = QueryKeyRequestByIdRequest{} }
func (m *QueryKeyRequestByIdRequest) String() string { return proto.CompactTextString(m) }
func (*QueryKeyRequestByIdRequest) ProtoMessage()    {}
func (*QueryKeyRequestByIdRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_dfc42e3ec3cc822d, []int{4}
}
func (m *QueryKeyRequestByIdRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryKeyRequestByIdRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryKeyRequestByIdRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryKeyRequestByIdRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryKeyRequestByIdRequest.Merge(m, src)
}
func (m *QueryKeyRequestByIdRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryKeyRequestByIdRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryKeyRequestByIdRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryKeyRequestByIdRequest proto.InternalMessageInfo

func (m *QueryKeyRequestByIdRequest) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type QueryKeyRequestByIdResponse struct {
	KeyRequest *KeyRequest `protobuf:"bytes,1,opt,name=key_request,json=keyRequest,proto3" json:"key_request,omitempty"`
}

func (m *QueryKeyRequestByIdResponse) Reset()         { *m = QueryKeyRequestByIdResponse{} }
func (m *QueryKeyRequestByIdResponse) String() string { return proto.CompactTextString(m) }
func (*QueryKeyRequestByIdResponse) ProtoMessage()    {}
func (*QueryKeyRequestByIdResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_dfc42e3ec3cc822d, []int{5}
}
func (m *QueryKeyRequestByIdResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryKeyRequestByIdResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryKeyRequestByIdResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryKeyRequestByIdResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryKeyRequestByIdResponse.Merge(m, src)
}
func (m *QueryKeyRequestByIdResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryKeyRequestByIdResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryKeyRequestByIdResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryKeyRequestByIdResponse proto.InternalMessageInfo

func (m *QueryKeyRequestByIdResponse) GetKeyRequest() *KeyRequest {
	if m != nil {
		return m.KeyRequest
	}
	return nil
}

type QueryKeysRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
	// Types that are valid to be assigned to XWorkspaceId:
	//	*QueryKeysRequest_WorkspaceId
	XWorkspaceId isQueryKeysRequest_XWorkspaceId `protobuf_oneof:"_workspace_id"`
}

func (m *QueryKeysRequest) Reset()         { *m = QueryKeysRequest{} }
func (m *QueryKeysRequest) String() string { return proto.CompactTextString(m) }
func (*QueryKeysRequest) ProtoMessage()    {}
func (*QueryKeysRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_dfc42e3ec3cc822d, []int{6}
}
func (m *QueryKeysRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryKeysRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryKeysRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryKeysRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryKeysRequest.Merge(m, src)
}
func (m *QueryKeysRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryKeysRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryKeysRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryKeysRequest proto.InternalMessageInfo

type isQueryKeysRequest_XWorkspaceId interface {
	isQueryKeysRequest_XWorkspaceId()
	MarshalTo([]byte) (int, error)
	Size() int
}

type QueryKeysRequest_WorkspaceId struct {
	WorkspaceId uint64 `protobuf:"varint,2,opt,name=workspace_id,json=workspaceId,proto3,oneof" json:"workspace_id,omitempty"`
}

func (*QueryKeysRequest_WorkspaceId) isQueryKeysRequest_XWorkspaceId() {}

func (m *QueryKeysRequest) GetXWorkspaceId() isQueryKeysRequest_XWorkspaceId {
	if m != nil {
		return m.XWorkspaceId
	}
	return nil
}

func (m *QueryKeysRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

func (m *QueryKeysRequest) GetWorkspaceId() uint64 {
	if x, ok := m.GetXWorkspaceId().(*QueryKeysRequest_WorkspaceId); ok {
		return x.WorkspaceId
	}
	return 0
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*QueryKeysRequest) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*QueryKeysRequest_WorkspaceId)(nil),
	}
}

type QueryKeysResponse struct {
	Pagination *query.PageResponse `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
	Keys       []*Key              `protobuf:"bytes,2,rep,name=keys,proto3" json:"keys,omitempty"`
}

func (m *QueryKeysResponse) Reset()         { *m = QueryKeysResponse{} }
func (m *QueryKeysResponse) String() string { return proto.CompactTextString(m) }
func (*QueryKeysResponse) ProtoMessage()    {}
func (*QueryKeysResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_dfc42e3ec3cc822d, []int{7}
}
func (m *QueryKeysResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryKeysResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryKeysResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryKeysResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryKeysResponse.Merge(m, src)
}
func (m *QueryKeysResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryKeysResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryKeysResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryKeysResponse proto.InternalMessageInfo

func (m *QueryKeysResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

func (m *QueryKeysResponse) GetKeys() []*Key {
	if m != nil {
		return m.Keys
	}
	return nil
}

type QuerySignatureRequestsRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
	// Types that are valid to be assigned to XStatus:
	//	*QuerySignatureRequestsRequest_Status
	XStatus isQuerySignatureRequestsRequest_XStatus `protobuf_oneof:"_status"`
}

func (m *QuerySignatureRequestsRequest) Reset()         { *m = QuerySignatureRequestsRequest{} }
func (m *QuerySignatureRequestsRequest) String() string { return proto.CompactTextString(m) }
func (*QuerySignatureRequestsRequest) ProtoMessage()    {}
func (*QuerySignatureRequestsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_dfc42e3ec3cc822d, []int{8}
}
func (m *QuerySignatureRequestsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuerySignatureRequestsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuerySignatureRequestsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuerySignatureRequestsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerySignatureRequestsRequest.Merge(m, src)
}
func (m *QuerySignatureRequestsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QuerySignatureRequestsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerySignatureRequestsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QuerySignatureRequestsRequest proto.InternalMessageInfo

type isQuerySignatureRequestsRequest_XStatus interface {
	isQuerySignatureRequestsRequest_XStatus()
	MarshalTo([]byte) (int, error)
	Size() int
}

type QuerySignatureRequestsRequest_Status struct {
	Status SignRequestStatus `protobuf:"varint,2,opt,name=status,proto3,enum=fusionchain.treasury.SignRequestStatus,oneof" json:"status,omitempty"`
}

func (*QuerySignatureRequestsRequest_Status) isQuerySignatureRequestsRequest_XStatus() {}

func (m *QuerySignatureRequestsRequest) GetXStatus() isQuerySignatureRequestsRequest_XStatus {
	if m != nil {
		return m.XStatus
	}
	return nil
}

func (m *QuerySignatureRequestsRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

func (m *QuerySignatureRequestsRequest) GetStatus() SignRequestStatus {
	if x, ok := m.GetXStatus().(*QuerySignatureRequestsRequest_Status); ok {
		return x.Status
	}
	return SignRequestStatus_SIGN_REQUEST_STATUS_UNSPECIFIED
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*QuerySignatureRequestsRequest) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*QuerySignatureRequestsRequest_Status)(nil),
	}
}

type QuerySignatureRequestsResponse struct {
	Pagination   *query.PageResponse `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
	SignRequests []*SignRequest      `protobuf:"bytes,2,rep,name=sign_requests,json=signRequests,proto3" json:"sign_requests,omitempty"`
}

func (m *QuerySignatureRequestsResponse) Reset()         { *m = QuerySignatureRequestsResponse{} }
func (m *QuerySignatureRequestsResponse) String() string { return proto.CompactTextString(m) }
func (*QuerySignatureRequestsResponse) ProtoMessage()    {}
func (*QuerySignatureRequestsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_dfc42e3ec3cc822d, []int{9}
}
func (m *QuerySignatureRequestsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuerySignatureRequestsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuerySignatureRequestsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuerySignatureRequestsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerySignatureRequestsResponse.Merge(m, src)
}
func (m *QuerySignatureRequestsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QuerySignatureRequestsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerySignatureRequestsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QuerySignatureRequestsResponse proto.InternalMessageInfo

func (m *QuerySignatureRequestsResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

func (m *QuerySignatureRequestsResponse) GetSignRequests() []*SignRequest {
	if m != nil {
		return m.SignRequests
	}
	return nil
}

type QuerySignatureRequestByIdRequest struct {
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *QuerySignatureRequestByIdRequest) Reset()         { *m = QuerySignatureRequestByIdRequest{} }
func (m *QuerySignatureRequestByIdRequest) String() string { return proto.CompactTextString(m) }
func (*QuerySignatureRequestByIdRequest) ProtoMessage()    {}
func (*QuerySignatureRequestByIdRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_dfc42e3ec3cc822d, []int{10}
}
func (m *QuerySignatureRequestByIdRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuerySignatureRequestByIdRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuerySignatureRequestByIdRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuerySignatureRequestByIdRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerySignatureRequestByIdRequest.Merge(m, src)
}
func (m *QuerySignatureRequestByIdRequest) XXX_Size() int {
	return m.Size()
}
func (m *QuerySignatureRequestByIdRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerySignatureRequestByIdRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QuerySignatureRequestByIdRequest proto.InternalMessageInfo

func (m *QuerySignatureRequestByIdRequest) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type QuerySignatureRequestByIdResponse struct {
	SignRequest *SignRequest `protobuf:"bytes,1,opt,name=sign_request,json=signRequest,proto3" json:"sign_request,omitempty"`
}

func (m *QuerySignatureRequestByIdResponse) Reset()         { *m = QuerySignatureRequestByIdResponse{} }
func (m *QuerySignatureRequestByIdResponse) String() string { return proto.CompactTextString(m) }
func (*QuerySignatureRequestByIdResponse) ProtoMessage()    {}
func (*QuerySignatureRequestByIdResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_dfc42e3ec3cc822d, []int{11}
}
func (m *QuerySignatureRequestByIdResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuerySignatureRequestByIdResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuerySignatureRequestByIdResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuerySignatureRequestByIdResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerySignatureRequestByIdResponse.Merge(m, src)
}
func (m *QuerySignatureRequestByIdResponse) XXX_Size() int {
	return m.Size()
}
func (m *QuerySignatureRequestByIdResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerySignatureRequestByIdResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QuerySignatureRequestByIdResponse proto.InternalMessageInfo

func (m *QuerySignatureRequestByIdResponse) GetSignRequest() *SignRequest {
	if m != nil {
		return m.SignRequest
	}
	return nil
}

type QueryWalletsRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryWalletsRequest) Reset()         { *m = QueryWalletsRequest{} }
func (m *QueryWalletsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryWalletsRequest) ProtoMessage()    {}
func (*QueryWalletsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_dfc42e3ec3cc822d, []int{12}
}
func (m *QueryWalletsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryWalletsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryWalletsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryWalletsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryWalletsRequest.Merge(m, src)
}
func (m *QueryWalletsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryWalletsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryWalletsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryWalletsRequest proto.InternalMessageInfo

func (m *QueryWalletsRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type WalletResponse struct {
	Wallet  *Wallet `protobuf:"bytes,1,opt,name=wallet,proto3" json:"wallet,omitempty"`
	Address string  `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *WalletResponse) Reset()         { *m = WalletResponse{} }
func (m *WalletResponse) String() string { return proto.CompactTextString(m) }
func (*WalletResponse) ProtoMessage()    {}
func (*WalletResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_dfc42e3ec3cc822d, []int{13}
}
func (m *WalletResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WalletResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WalletResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WalletResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WalletResponse.Merge(m, src)
}
func (m *WalletResponse) XXX_Size() int {
	return m.Size()
}
func (m *WalletResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_WalletResponse.DiscardUnknown(m)
}

var xxx_messageInfo_WalletResponse proto.InternalMessageInfo

func (m *WalletResponse) GetWallet() *Wallet {
	if m != nil {
		return m.Wallet
	}
	return nil
}

func (m *WalletResponse) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

type QueryWalletsResponse struct {
	Pagination *query.PageResponse `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
	Wallets    []*WalletResponse   `protobuf:"bytes,2,rep,name=wallets,proto3" json:"wallets,omitempty"`
}

func (m *QueryWalletsResponse) Reset()         { *m = QueryWalletsResponse{} }
func (m *QueryWalletsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryWalletsResponse) ProtoMessage()    {}
func (*QueryWalletsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_dfc42e3ec3cc822d, []int{14}
}
func (m *QueryWalletsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryWalletsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryWalletsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryWalletsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryWalletsResponse.Merge(m, src)
}
func (m *QueryWalletsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryWalletsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryWalletsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryWalletsResponse proto.InternalMessageInfo

func (m *QueryWalletsResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

func (m *QueryWalletsResponse) GetWallets() []*WalletResponse {
	if m != nil {
		return m.Wallets
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryParamsRequest)(nil), "fusionchain.treasury.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "fusionchain.treasury.QueryParamsResponse")
	proto.RegisterType((*QueryKeyRequestsRequest)(nil), "fusionchain.treasury.QueryKeyRequestsRequest")
	proto.RegisterType((*QueryKeyRequestsResponse)(nil), "fusionchain.treasury.QueryKeyRequestsResponse")
	proto.RegisterType((*QueryKeyRequestByIdRequest)(nil), "fusionchain.treasury.QueryKeyRequestByIdRequest")
	proto.RegisterType((*QueryKeyRequestByIdResponse)(nil), "fusionchain.treasury.QueryKeyRequestByIdResponse")
	proto.RegisterType((*QueryKeysRequest)(nil), "fusionchain.treasury.QueryKeysRequest")
	proto.RegisterType((*QueryKeysResponse)(nil), "fusionchain.treasury.QueryKeysResponse")
	proto.RegisterType((*QuerySignatureRequestsRequest)(nil), "fusionchain.treasury.QuerySignatureRequestsRequest")
	proto.RegisterType((*QuerySignatureRequestsResponse)(nil), "fusionchain.treasury.QuerySignatureRequestsResponse")
	proto.RegisterType((*QuerySignatureRequestByIdRequest)(nil), "fusionchain.treasury.QuerySignatureRequestByIdRequest")
	proto.RegisterType((*QuerySignatureRequestByIdResponse)(nil), "fusionchain.treasury.QuerySignatureRequestByIdResponse")
	proto.RegisterType((*QueryWalletsRequest)(nil), "fusionchain.treasury.QueryWalletsRequest")
	proto.RegisterType((*WalletResponse)(nil), "fusionchain.treasury.WalletResponse")
	proto.RegisterType((*QueryWalletsResponse)(nil), "fusionchain.treasury.QueryWalletsResponse")
}

func init() { proto.RegisterFile("fusionchain/treasury/query.proto", fileDescriptor_dfc42e3ec3cc822d) }

var fileDescriptor_dfc42e3ec3cc822d = []byte{
	// 902 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x96, 0x41, 0x6f, 0xe3, 0x44,
	0x14, 0xc7, 0x33, 0x21, 0xa4, 0xea, 0x4b, 0xb7, 0xb0, 0x43, 0x24, 0x82, 0x59, 0x4c, 0x6a, 0xad,
	0xd2, 0xec, 0xaa, 0x6b, 0xd3, 0xb4, 0xa2, 0x5a, 0x0e, 0x20, 0xca, 0x6a, 0xd9, 0x15, 0x97, 0xad,
	0xf7, 0x80, 0x84, 0x84, 0xb2, 0x93, 0x78, 0x30, 0x56, 0x5a, 0x8f, 0xeb, 0x71, 0x58, 0x7c, 0x45,
	0x42, 0x42, 0x42, 0x2b, 0x81, 0xf6, 0x03, 0x20, 0x71, 0xe2, 0xc8, 0x4a, 0x1c, 0xf8, 0x08, 0x3d,
	0x56, 0xe2, 0xc2, 0x09, 0xa1, 0x96, 0x0f, 0x82, 0x32, 0x33, 0x6e, 0x9c, 0xc4, 0xb1, 0x13, 0x29,
	0x7b, 0x8b, 0xed, 0xff, 0x7b, 0xef, 0x37, 0xef, 0xcd, 0x7b, 0x2f, 0xd0, 0xfc, 0x6a, 0xc8, 0x3d,
	0xe6, 0xf7, 0xbf, 0x26, 0x9e, 0x6f, 0x45, 0x21, 0x25, 0x7c, 0x18, 0xc6, 0xd6, 0xe9, 0x90, 0x86,
	0xb1, 0x19, 0x84, 0x2c, 0x62, 0xb8, 0x9e, 0x52, 0x98, 0x89, 0x42, 0xab, 0xbb, 0xcc, 0x65, 0x42,
	0x60, 0x8d, 0x7e, 0x49, 0xad, 0x76, 0xc3, 0x65, 0xcc, 0x3d, 0xa6, 0x16, 0x09, 0x3c, 0x8b, 0xf8,
	0x3e, 0x8b, 0x48, 0xe4, 0x31, 0x9f, 0xab, 0xaf, 0xb7, 0xfb, 0x8c, 0x9f, 0x30, 0x6e, 0xf5, 0x08,
	0xa7, 0x32, 0x84, 0xf5, 0xcd, 0x6e, 0x8f, 0x46, 0x64, 0xd7, 0x0a, 0x88, 0xeb, 0xf9, 0x42, 0xac,
	0xb4, 0x5b, 0x99, 0x5c, 0x01, 0x09, 0xc9, 0x49, 0xe2, 0x4e, 0xcf, 0x94, 0x0c, 0xa8, 0x02, 0xd7,
	0x8c, 0xcc, 0xef, 0x27, 0x41, 0x9f, 0x7b, 0x6e, 0x7e, 0x98, 0xa7, 0xe4, 0xf8, 0x98, 0x46, 0x52,
	0x62, 0xd4, 0x01, 0x1f, 0x8d, 0x58, 0x1f, 0x89, 0xd8, 0x36, 0x3d, 0x1d, 0x52, 0x1e, 0x19, 0x47,
	0xf0, 0xc6, 0xc4, 0x5b, 0x1e, 0x30, 0x9f, 0x53, 0xfc, 0x01, 0x54, 0x25, 0x63, 0x03, 0x35, 0x51,
	0xbb, 0xd6, 0xb9, 0x61, 0x66, 0x65, 0xcf, 0x94, 0x56, 0x87, 0x95, 0xb3, 0x7f, 0xde, 0x2d, 0xd9,
	0xca, 0xc2, 0x78, 0x81, 0xe0, 0x4d, 0xe1, 0xf3, 0x33, 0x1a, 0xab, 0x30, 0x49, 0x38, 0x7c, 0x1f,
	0x60, 0x9c, 0x22, 0xe5, 0xbb, 0x65, 0xca, 0x7c, 0x9a, 0xa3, 0x7c, 0x9a, 0xb2, 0x64, 0x2a, 0x9f,
	0xe6, 0x23, 0xe2, 0x52, 0x65, 0x6b, 0xa7, 0x2c, 0xf1, 0x27, 0x50, 0xe5, 0x11, 0x89, 0x86, 0xbc,
	0x51, 0x6e, 0xa2, 0xf6, 0x66, 0xa7, 0x95, 0xcd, 0x37, 0x26, 0x78, 0x2c, 0xd4, 0x0f, 0x4a, 0xb6,
	0xb2, 0xfb, 0x01, 0xa1, 0xc3, 0x75, 0x58, 0xeb, 0xca, 0x27, 0xe3, 0x37, 0x04, 0x8d, 0x59, 0x66,
	0x95, 0x8c, 0x4f, 0x33, 0xa0, 0xb7, 0x0b, 0xa1, 0xa5, 0xf1, 0x14, 0xf5, 0xc6, 0x80, 0xc6, 0xdd,
	0x50, 0x05, 0x68, 0x94, 0x9b, 0xaf, 0xb4, 0x6b, 0x9d, 0x66, 0x11, 0xbb, 0x5d, 0x1b, 0x8c, 0xa9,
	0x8c, 0x1d, 0xd0, 0xa6, 0x48, 0x0f, 0xe3, 0x87, 0x4e, 0x92, 0xe0, 0x4d, 0x28, 0x7b, 0x8e, 0x60,
	0xac, 0xd8, 0x65, 0xcf, 0x31, 0x9e, 0xc0, 0xdb, 0x99, 0x6a, 0x75, 0xb4, 0x8f, 0xa1, 0x96, 0x22,
	0x52, 0x67, 0x2b, 0x06, 0x82, 0x31, 0x90, 0xf1, 0x1c, 0xc1, 0xeb, 0x49, 0x88, 0x95, 0xd7, 0xb9,
	0x05, 0x1b, 0x4f, 0x59, 0x38, 0xe0, 0x01, 0xe9, 0xd3, 0xae, 0xe7, 0x88, 0x6a, 0x57, 0x1e, 0x94,
	0xec, 0xda, 0xd5, 0xdb, 0x87, 0xce, 0xa8, 0x94, 0xaf, 0xc1, 0xb5, 0x6e, 0x5a, 0x68, 0xfc, 0x88,
	0xe0, 0x7a, 0x8a, 0x6a, 0xd5, 0x95, 0xbc, 0x03, 0x95, 0x01, 0x8d, 0x93, 0x0a, 0xbe, 0x35, 0x3f,
	0x61, 0x42, 0x66, 0xfc, 0x89, 0xe0, 0x1d, 0x41, 0xf3, 0xd8, 0x73, 0x7d, 0x12, 0x0d, 0x43, 0xfa,
	0xb2, 0x1a, 0xe3, 0xde, 0x54, 0x63, 0x6c, 0x67, 0xa3, 0x8d, 0x38, 0x16, 0xeb, 0x8c, 0x17, 0x08,
	0xf4, 0x79, 0xe8, 0xab, 0xce, 0xea, 0x7d, 0xb8, 0x36, 0x9a, 0x69, 0xd3, 0x0d, 0xb2, 0x55, 0x78,
	0x06, 0x7b, 0x83, 0x8f, 0x1f, 0xb8, 0xd1, 0x81, 0x66, 0x26, 0x72, 0x5e, 0xa3, 0x78, 0xb0, 0x95,
	0x63, 0xa3, 0x4e, 0x7a, 0x0f, 0x36, 0xd2, 0x80, 0xea, 0xac, 0x0b, 0xf0, 0xd5, 0x52, 0x7c, 0xc6,
	0x97, 0x6a, 0xe6, 0x7e, 0x2e, 0xc6, 0xf3, 0xaa, 0xaf, 0x80, 0xf1, 0x04, 0x36, 0xa5, 0xe7, 0x2b,
	0xec, 0x7d, 0xa8, 0xca, 0x55, 0x90, 0x3f, 0xcd, 0x95, 0x95, 0xd2, 0xe2, 0x06, 0xac, 0x11, 0xc7,
	0x09, 0x29, 0x97, 0x77, 0x69, 0xdd, 0x4e, 0x1e, 0x8d, 0x5f, 0x10, 0xd4, 0x27, 0x4f, 0xb0, 0xea,
	0x9b, 0xf0, 0x21, 0xac, 0x49, 0x8a, 0xe4, 0x0e, 0xdc, 0xcc, 0x45, 0x4e, 0x5c, 0x24, 0x46, 0x9d,
	0x67, 0xeb, 0xf0, 0xaa, 0x20, 0xc4, 0xcf, 0x10, 0x54, 0xe5, 0x9a, 0xc2, 0xed, 0x6c, 0x1f, 0xb3,
	0x5b, 0x51, 0xbb, 0xb5, 0x80, 0x52, 0x86, 0x34, 0xcc, 0xef, 0xfe, 0xfa, 0xef, 0x79, 0xb9, 0x8d,
	0x5b, 0xd6, 0x69, 0xe8, 0x30, 0xb9, 0x80, 0x73, 0x76, 0x3e, 0xfe, 0x15, 0x41, 0x2d, 0xb5, 0x64,
	0xf0, 0x9d, 0x9c, 0x50, 0xb3, 0x0b, 0x54, 0x33, 0x17, 0x95, 0x2b, 0xbc, 0x7d, 0x81, 0x67, 0xe2,
	0x9d, 0x22, 0xbc, 0xf4, 0x62, 0xc2, 0xbf, 0x23, 0xd8, 0x9c, 0xdc, 0x18, 0xf8, 0xbd, 0x85, 0x02,
	0xa7, 0x3a, 0x4c, 0xdb, 0x5d, 0xc2, 0x42, 0xd1, 0xde, 0x15, 0xb4, 0x7b, 0x78, 0x77, 0x09, 0xda,
	0x6e, 0x2f, 0xee, 0x7a, 0x0e, 0xfe, 0x1e, 0x41, 0x65, 0x34, 0xeb, 0x71, 0x2b, 0x3f, 0xec, 0x55,
	0x26, 0xb7, 0x0b, 0x75, 0x0a, 0x6a, 0x47, 0x40, 0xb5, 0xf0, 0xcd, 0x05, 0xa0, 0x38, 0xfe, 0x03,
	0xc1, 0xf5, 0x99, 0x51, 0x89, 0xf7, 0x72, 0x82, 0xcd, 0xdb, 0x09, 0xda, 0xfe, 0x72, 0x46, 0x33,
	0x15, 0xcf, 0x84, 0x74, 0x69, 0xd4, 0xe5, 0x89, 0xf1, 0xb8, 0xe2, 0x67, 0x08, 0xea, 0x59, 0xa3,
	0x0f, 0xbf, 0xbf, 0x04, 0x44, 0xba, 0xfa, 0x07, 0x4b, 0xdb, 0x29, 0xfe, 0x8f, 0x04, 0xff, 0x5d,
	0x7c, 0x50, 0x94, 0xee, 0x99, 0x53, 0xa8, 0x9b, 0xf0, 0x33, 0x82, 0x35, 0x35, 0x98, 0x70, 0x5e,
	0x23, 0x4f, 0x8e, 0x5f, 0xed, 0xf6, 0x22, 0x52, 0xc5, 0x68, 0x09, 0xc6, 0x5b, 0x78, 0xbb, 0x88,
	0x51, 0xcd, 0xa3, 0xc3, 0xa3, 0xb3, 0x0b, 0x1d, 0x9d, 0x5f, 0xe8, 0xe8, 0xdf, 0x0b, 0x1d, 0xfd,
	0x74, 0xa9, 0x97, 0xce, 0x2f, 0xf5, 0xd2, 0xdf, 0x97, 0x7a, 0xe9, 0x8b, 0x03, 0xd7, 0x8b, 0x8e,
	0x49, 0xcf, 0x3c, 0x0d, 0xa9, 0xc3, 0xcc, 0x3e, 0x3b, 0x99, 0xe3, 0xf2, 0xdb, 0xb1, 0xd3, 0x28,
	0x0e, 0x28, 0xef, 0x55, 0xc5, 0xdf, 0xfa, 0xbd, 0xff, 0x03, 0x00, 0x00, 0xff, 0xff, 0x40, 0x8d,
	0xaa, 0x13, 0xfa, 0x0c, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Parameters queries the parameters of the module.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// Queries a list of KeyRequests items.
	KeyRequests(ctx context.Context, in *QueryKeyRequestsRequest, opts ...grpc.CallOption) (*QueryKeyRequestsResponse, error)
	// Queries a single KeyRequest by its id.
	KeyRequestById(ctx context.Context, in *QueryKeyRequestByIdRequest, opts ...grpc.CallOption) (*QueryKeyRequestByIdResponse, error)
	// Queries a list of Keys items.
	Keys(ctx context.Context, in *QueryKeysRequest, opts ...grpc.CallOption) (*QueryKeysResponse, error)
	// Queries a list of SignatureRequests items.
	SignatureRequests(ctx context.Context, in *QuerySignatureRequestsRequest, opts ...grpc.CallOption) (*QuerySignatureRequestsResponse, error)
	// Queries a single SignatureRequest by its id.
	SignatureRequestById(ctx context.Context, in *QuerySignatureRequestByIdRequest, opts ...grpc.CallOption) (*QuerySignatureRequestByIdResponse, error)
	// Queries a list of Wallet items.
	Wallets(ctx context.Context, in *QueryWalletsRequest, opts ...grpc.CallOption) (*QueryWalletsResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/fusionchain.treasury.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) KeyRequests(ctx context.Context, in *QueryKeyRequestsRequest, opts ...grpc.CallOption) (*QueryKeyRequestsResponse, error) {
	out := new(QueryKeyRequestsResponse)
	err := c.cc.Invoke(ctx, "/fusionchain.treasury.Query/KeyRequests", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) KeyRequestById(ctx context.Context, in *QueryKeyRequestByIdRequest, opts ...grpc.CallOption) (*QueryKeyRequestByIdResponse, error) {
	out := new(QueryKeyRequestByIdResponse)
	err := c.cc.Invoke(ctx, "/fusionchain.treasury.Query/KeyRequestById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Keys(ctx context.Context, in *QueryKeysRequest, opts ...grpc.CallOption) (*QueryKeysResponse, error) {
	out := new(QueryKeysResponse)
	err := c.cc.Invoke(ctx, "/fusionchain.treasury.Query/Keys", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) SignatureRequests(ctx context.Context, in *QuerySignatureRequestsRequest, opts ...grpc.CallOption) (*QuerySignatureRequestsResponse, error) {
	out := new(QuerySignatureRequestsResponse)
	err := c.cc.Invoke(ctx, "/fusionchain.treasury.Query/SignatureRequests", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) SignatureRequestById(ctx context.Context, in *QuerySignatureRequestByIdRequest, opts ...grpc.CallOption) (*QuerySignatureRequestByIdResponse, error) {
	out := new(QuerySignatureRequestByIdResponse)
	err := c.cc.Invoke(ctx, "/fusionchain.treasury.Query/SignatureRequestById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Wallets(ctx context.Context, in *QueryWalletsRequest, opts ...grpc.CallOption) (*QueryWalletsResponse, error) {
	out := new(QueryWalletsResponse)
	err := c.cc.Invoke(ctx, "/fusionchain.treasury.Query/Wallets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Parameters queries the parameters of the module.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// Queries a list of KeyRequests items.
	KeyRequests(context.Context, *QueryKeyRequestsRequest) (*QueryKeyRequestsResponse, error)
	// Queries a single KeyRequest by its id.
	KeyRequestById(context.Context, *QueryKeyRequestByIdRequest) (*QueryKeyRequestByIdResponse, error)
	// Queries a list of Keys items.
	Keys(context.Context, *QueryKeysRequest) (*QueryKeysResponse, error)
	// Queries a list of SignatureRequests items.
	SignatureRequests(context.Context, *QuerySignatureRequestsRequest) (*QuerySignatureRequestsResponse, error)
	// Queries a single SignatureRequest by its id.
	SignatureRequestById(context.Context, *QuerySignatureRequestByIdRequest) (*QuerySignatureRequestByIdResponse, error)
	// Queries a list of Wallet items.
	Wallets(context.Context, *QueryWalletsRequest) (*QueryWalletsResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryServer) KeyRequests(ctx context.Context, req *QueryKeyRequestsRequest) (*QueryKeyRequestsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method KeyRequests not implemented")
}
func (*UnimplementedQueryServer) KeyRequestById(ctx context.Context, req *QueryKeyRequestByIdRequest) (*QueryKeyRequestByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method KeyRequestById not implemented")
}
func (*UnimplementedQueryServer) Keys(ctx context.Context, req *QueryKeysRequest) (*QueryKeysResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Keys not implemented")
}
func (*UnimplementedQueryServer) SignatureRequests(ctx context.Context, req *QuerySignatureRequestsRequest) (*QuerySignatureRequestsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignatureRequests not implemented")
}
func (*UnimplementedQueryServer) SignatureRequestById(ctx context.Context, req *QuerySignatureRequestByIdRequest) (*QuerySignatureRequestByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignatureRequestById not implemented")
}
func (*UnimplementedQueryServer) Wallets(ctx context.Context, req *QueryWalletsRequest) (*QueryWalletsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Wallets not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fusionchain.treasury.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_KeyRequests_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryKeyRequestsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).KeyRequests(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fusionchain.treasury.Query/KeyRequests",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).KeyRequests(ctx, req.(*QueryKeyRequestsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_KeyRequestById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryKeyRequestByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).KeyRequestById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fusionchain.treasury.Query/KeyRequestById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).KeyRequestById(ctx, req.(*QueryKeyRequestByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Keys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryKeysRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Keys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fusionchain.treasury.Query/Keys",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Keys(ctx, req.(*QueryKeysRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_SignatureRequests_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuerySignatureRequestsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).SignatureRequests(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fusionchain.treasury.Query/SignatureRequests",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).SignatureRequests(ctx, req.(*QuerySignatureRequestsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_SignatureRequestById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuerySignatureRequestByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).SignatureRequestById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fusionchain.treasury.Query/SignatureRequestById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).SignatureRequestById(ctx, req.(*QuerySignatureRequestByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Wallets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryWalletsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Wallets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fusionchain.treasury.Query/Wallets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Wallets(ctx, req.(*QueryWalletsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "fusionchain.treasury.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "KeyRequests",
			Handler:    _Query_KeyRequests_Handler,
		},
		{
			MethodName: "KeyRequestById",
			Handler:    _Query_KeyRequestById_Handler,
		},
		{
			MethodName: "Keys",
			Handler:    _Query_Keys_Handler,
		},
		{
			MethodName: "SignatureRequests",
			Handler:    _Query_SignatureRequests_Handler,
		},
		{
			MethodName: "SignatureRequestById",
			Handler:    _Query_SignatureRequestById_Handler,
		},
		{
			MethodName: "Wallets",
			Handler:    _Query_Wallets_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "fusionchain/treasury/query.proto",
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryKeyRequestsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryKeyRequestsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryKeyRequestsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XStatus != nil {
		{
			size := m.XStatus.Size()
			i -= size
			if _, err := m.XStatus.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryKeyRequestsRequest_Status) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryKeyRequestsRequest_Status) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i = encodeVarintQuery(dAtA, i, uint64(m.Status))
	i--
	dAtA[i] = 0x10
	return len(dAtA) - i, nil
}
func (m *QueryKeyRequestsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryKeyRequestsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryKeyRequestsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.KeyRequests) > 0 {
		for iNdEx := len(m.KeyRequests) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.KeyRequests[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryKeyRequestByIdRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryKeyRequestByIdRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryKeyRequestByIdRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryKeyRequestByIdResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryKeyRequestByIdResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryKeyRequestByIdResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.KeyRequest != nil {
		{
			size, err := m.KeyRequest.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryKeysRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryKeysRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryKeysRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XWorkspaceId != nil {
		{
			size := m.XWorkspaceId.Size()
			i -= size
			if _, err := m.XWorkspaceId.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryKeysRequest_WorkspaceId) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryKeysRequest_WorkspaceId) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i = encodeVarintQuery(dAtA, i, uint64(m.WorkspaceId))
	i--
	dAtA[i] = 0x10
	return len(dAtA) - i, nil
}
func (m *QueryKeysResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryKeysResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryKeysResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Keys) > 0 {
		for iNdEx := len(m.Keys) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Keys[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QuerySignatureRequestsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuerySignatureRequestsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuerySignatureRequestsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XStatus != nil {
		{
			size := m.XStatus.Size()
			i -= size
			if _, err := m.XStatus.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QuerySignatureRequestsRequest_Status) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuerySignatureRequestsRequest_Status) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i = encodeVarintQuery(dAtA, i, uint64(m.Status))
	i--
	dAtA[i] = 0x10
	return len(dAtA) - i, nil
}
func (m *QuerySignatureRequestsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuerySignatureRequestsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuerySignatureRequestsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SignRequests) > 0 {
		for iNdEx := len(m.SignRequests) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SignRequests[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QuerySignatureRequestByIdRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuerySignatureRequestByIdRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuerySignatureRequestByIdRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QuerySignatureRequestByIdResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuerySignatureRequestByIdResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuerySignatureRequestByIdResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SignRequest != nil {
		{
			size, err := m.SignRequest.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryWalletsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryWalletsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryWalletsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *WalletResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WalletResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WalletResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x12
	}
	if m.Wallet != nil {
		{
			size, err := m.Wallet.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryWalletsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryWalletsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryWalletsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Wallets) > 0 {
		for iNdEx := len(m.Wallets) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Wallets[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryKeyRequestsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.XStatus != nil {
		n += m.XStatus.Size()
	}
	return n
}

func (m *QueryKeyRequestsRequest_Status) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovQuery(uint64(m.Status))
	return n
}
func (m *QueryKeyRequestsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	if len(m.KeyRequests) > 0 {
		for _, e := range m.KeyRequests {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryKeyRequestByIdRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovQuery(uint64(m.Id))
	}
	return n
}

func (m *QueryKeyRequestByIdResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.KeyRequest != nil {
		l = m.KeyRequest.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryKeysRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.XWorkspaceId != nil {
		n += m.XWorkspaceId.Size()
	}
	return n
}

func (m *QueryKeysRequest_WorkspaceId) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovQuery(uint64(m.WorkspaceId))
	return n
}
func (m *QueryKeysResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	if len(m.Keys) > 0 {
		for _, e := range m.Keys {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QuerySignatureRequestsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.XStatus != nil {
		n += m.XStatus.Size()
	}
	return n
}

func (m *QuerySignatureRequestsRequest_Status) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovQuery(uint64(m.Status))
	return n
}
func (m *QuerySignatureRequestsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	if len(m.SignRequests) > 0 {
		for _, e := range m.SignRequests {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QuerySignatureRequestByIdRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovQuery(uint64(m.Id))
	}
	return n
}

func (m *QuerySignatureRequestByIdResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SignRequest != nil {
		l = m.SignRequest.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryWalletsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *WalletResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Wallet != nil {
		l = m.Wallet.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryWalletsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	if len(m.Wallets) > 0 {
		for _, e := range m.Wallets {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryKeyRequestsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryKeyRequestsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryKeyRequestsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var v KeyRequestStatus
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= KeyRequestStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.XStatus = &QueryKeyRequestsRequest_Status{v}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryKeyRequestsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryKeyRequestsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryKeyRequestsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyRequests", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.KeyRequests = append(m.KeyRequests, &KeyRequest{})
			if err := m.KeyRequests[len(m.KeyRequests)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryKeyRequestByIdRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryKeyRequestByIdRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryKeyRequestByIdRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryKeyRequestByIdResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryKeyRequestByIdResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryKeyRequestByIdResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyRequest", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.KeyRequest == nil {
				m.KeyRequest = &KeyRequest{}
			}
			if err := m.KeyRequest.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryKeysRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryKeysRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryKeysRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkspaceId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.XWorkspaceId = &QueryKeysRequest_WorkspaceId{v}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryKeysResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryKeysResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryKeysResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Keys", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Keys = append(m.Keys, &Key{})
			if err := m.Keys[len(m.Keys)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuerySignatureRequestsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuerySignatureRequestsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuerySignatureRequestsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var v SignRequestStatus
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= SignRequestStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.XStatus = &QuerySignatureRequestsRequest_Status{v}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuerySignatureRequestsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuerySignatureRequestsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuerySignatureRequestsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SignRequests", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SignRequests = append(m.SignRequests, &SignRequest{})
			if err := m.SignRequests[len(m.SignRequests)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuerySignatureRequestByIdRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuerySignatureRequestByIdRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuerySignatureRequestByIdRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuerySignatureRequestByIdResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuerySignatureRequestByIdResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuerySignatureRequestByIdResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SignRequest", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SignRequest == nil {
				m.SignRequest = &SignRequest{}
			}
			if err := m.SignRequest.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryWalletsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryWalletsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryWalletsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WalletResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WalletResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WalletResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Wallet", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Wallet == nil {
				m.Wallet = &Wallet{}
			}
			if err := m.Wallet.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryWalletsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryWalletsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryWalletsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Wallets", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Wallets = append(m.Wallets, &WalletResponse{})
			if err := m.Wallets[len(m.Wallets)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
