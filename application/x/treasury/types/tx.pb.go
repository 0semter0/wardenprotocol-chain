// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: fusionchain/treasury/tx.proto

package types

import (
	context "context"
	fmt "fmt"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type MsgNewWalletRequest struct {
	Creator     string     `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	WorkspaceId uint64     `protobuf:"varint,2,opt,name=workspace_id,json=workspaceId,proto3" json:"workspace_id,omitempty"`
	WalletType  WalletType `protobuf:"varint,3,opt,name=wallet_type,json=walletType,proto3,enum=fusionchain.treasury.WalletType" json:"wallet_type,omitempty"`
}

func (m *MsgNewWalletRequest) Reset()         { *m = MsgNewWalletRequest{} }
func (m *MsgNewWalletRequest) String() string { return proto.CompactTextString(m) }
func (*MsgNewWalletRequest) ProtoMessage()    {}
func (*MsgNewWalletRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b5f7e7b3c14eb6e0, []int{0}
}
func (m *MsgNewWalletRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgNewWalletRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgNewWalletRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgNewWalletRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgNewWalletRequest.Merge(m, src)
}
func (m *MsgNewWalletRequest) XXX_Size() int {
	return m.Size()
}
func (m *MsgNewWalletRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgNewWalletRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MsgNewWalletRequest proto.InternalMessageInfo

func (m *MsgNewWalletRequest) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgNewWalletRequest) GetWorkspaceId() uint64 {
	if m != nil {
		return m.WorkspaceId
	}
	return 0
}

func (m *MsgNewWalletRequest) GetWalletType() WalletType {
	if m != nil {
		return m.WalletType
	}
	return WalletType_WALLET_TYPE_UNSPECIFIED
}

type MsgNewWalletRequestResponse struct {
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *MsgNewWalletRequestResponse) Reset()         { *m = MsgNewWalletRequestResponse{} }
func (m *MsgNewWalletRequestResponse) String() string { return proto.CompactTextString(m) }
func (*MsgNewWalletRequestResponse) ProtoMessage()    {}
func (*MsgNewWalletRequestResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b5f7e7b3c14eb6e0, []int{1}
}
func (m *MsgNewWalletRequestResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgNewWalletRequestResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgNewWalletRequestResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgNewWalletRequestResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgNewWalletRequestResponse.Merge(m, src)
}
func (m *MsgNewWalletRequestResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgNewWalletRequestResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgNewWalletRequestResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgNewWalletRequestResponse proto.InternalMessageInfo

func (m *MsgNewWalletRequestResponse) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type MsgUpdateWalletRequest struct {
	Creator   string              `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	RequestId uint64              `protobuf:"varint,2,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	Status    WalletRequestStatus `protobuf:"varint,3,opt,name=status,proto3,enum=fusionchain.treasury.WalletRequestStatus" json:"status,omitempty"`
	// Holds the result of the request. If status is approved, the result will
	// contain the requested wallet's public key that can be used for signing
	// payloads.
	// If status is rejected, the result will contain the reason.
	//
	// Types that are valid to be assigned to Result:
	//	*MsgUpdateWalletRequest_Wallet
	//	*MsgUpdateWalletRequest_RejectReason
	Result isMsgUpdateWalletRequest_Result `protobuf_oneof:"result"`
}

func (m *MsgUpdateWalletRequest) Reset()         { *m = MsgUpdateWalletRequest{} }
func (m *MsgUpdateWalletRequest) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateWalletRequest) ProtoMessage()    {}
func (*MsgUpdateWalletRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b5f7e7b3c14eb6e0, []int{2}
}
func (m *MsgUpdateWalletRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateWalletRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateWalletRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateWalletRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateWalletRequest.Merge(m, src)
}
func (m *MsgUpdateWalletRequest) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateWalletRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateWalletRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateWalletRequest proto.InternalMessageInfo

type isMsgUpdateWalletRequest_Result interface {
	isMsgUpdateWalletRequest_Result()
	MarshalTo([]byte) (int, error)
	Size() int
}

type MsgUpdateWalletRequest_Wallet struct {
	Wallet *MsgNewWallet `protobuf:"bytes,4,opt,name=wallet,proto3,oneof" json:"wallet,omitempty"`
}
type MsgUpdateWalletRequest_RejectReason struct {
	RejectReason string `protobuf:"bytes,5,opt,name=reject_reason,json=rejectReason,proto3,oneof" json:"reject_reason,omitempty"`
}

func (*MsgUpdateWalletRequest_Wallet) isMsgUpdateWalletRequest_Result()       {}
func (*MsgUpdateWalletRequest_RejectReason) isMsgUpdateWalletRequest_Result() {}

func (m *MsgUpdateWalletRequest) GetResult() isMsgUpdateWalletRequest_Result {
	if m != nil {
		return m.Result
	}
	return nil
}

func (m *MsgUpdateWalletRequest) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgUpdateWalletRequest) GetRequestId() uint64 {
	if m != nil {
		return m.RequestId
	}
	return 0
}

func (m *MsgUpdateWalletRequest) GetStatus() WalletRequestStatus {
	if m != nil {
		return m.Status
	}
	return WalletRequestStatus_WALLET_REQUEST_STATUS_UNSPECIFIED
}

func (m *MsgUpdateWalletRequest) GetWallet() *MsgNewWallet {
	if x, ok := m.GetResult().(*MsgUpdateWalletRequest_Wallet); ok {
		return x.Wallet
	}
	return nil
}

func (m *MsgUpdateWalletRequest) GetRejectReason() string {
	if x, ok := m.GetResult().(*MsgUpdateWalletRequest_RejectReason); ok {
		return x.RejectReason
	}
	return ""
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*MsgUpdateWalletRequest) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*MsgUpdateWalletRequest_Wallet)(nil),
		(*MsgUpdateWalletRequest_RejectReason)(nil),
	}
}

type MsgUpdateWalletRequestResponse struct {
}

func (m *MsgUpdateWalletRequestResponse) Reset()         { *m = MsgUpdateWalletRequestResponse{} }
func (m *MsgUpdateWalletRequestResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateWalletRequestResponse) ProtoMessage()    {}
func (*MsgUpdateWalletRequestResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b5f7e7b3c14eb6e0, []int{3}
}
func (m *MsgUpdateWalletRequestResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateWalletRequestResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateWalletRequestResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateWalletRequestResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateWalletRequestResponse.Merge(m, src)
}
func (m *MsgUpdateWalletRequestResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateWalletRequestResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateWalletRequestResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateWalletRequestResponse proto.InternalMessageInfo

type MsgNewWallet struct {
	PublicKey []byte `protobuf:"bytes,2,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"`
}

func (m *MsgNewWallet) Reset()         { *m = MsgNewWallet{} }
func (m *MsgNewWallet) String() string { return proto.CompactTextString(m) }
func (*MsgNewWallet) ProtoMessage()    {}
func (*MsgNewWallet) Descriptor() ([]byte, []int) {
	return fileDescriptor_b5f7e7b3c14eb6e0, []int{4}
}
func (m *MsgNewWallet) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgNewWallet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgNewWallet.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgNewWallet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgNewWallet.Merge(m, src)
}
func (m *MsgNewWallet) XXX_Size() int {
	return m.Size()
}
func (m *MsgNewWallet) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgNewWallet.DiscardUnknown(m)
}

var xxx_messageInfo_MsgNewWallet proto.InternalMessageInfo

func (m *MsgNewWallet) GetPublicKey() []byte {
	if m != nil {
		return m.PublicKey
	}
	return nil
}

type MsgNewSignatureRequest struct {
	Creator string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
}

func (m *MsgNewSignatureRequest) Reset()         { *m = MsgNewSignatureRequest{} }
func (m *MsgNewSignatureRequest) String() string { return proto.CompactTextString(m) }
func (*MsgNewSignatureRequest) ProtoMessage()    {}
func (*MsgNewSignatureRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b5f7e7b3c14eb6e0, []int{5}
}
func (m *MsgNewSignatureRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgNewSignatureRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgNewSignatureRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgNewSignatureRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgNewSignatureRequest.Merge(m, src)
}
func (m *MsgNewSignatureRequest) XXX_Size() int {
	return m.Size()
}
func (m *MsgNewSignatureRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgNewSignatureRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MsgNewSignatureRequest proto.InternalMessageInfo

func (m *MsgNewSignatureRequest) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

type MsgNewSignatureRequestResponse struct {
}

func (m *MsgNewSignatureRequestResponse) Reset()         { *m = MsgNewSignatureRequestResponse{} }
func (m *MsgNewSignatureRequestResponse) String() string { return proto.CompactTextString(m) }
func (*MsgNewSignatureRequestResponse) ProtoMessage()    {}
func (*MsgNewSignatureRequestResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b5f7e7b3c14eb6e0, []int{6}
}
func (m *MsgNewSignatureRequestResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgNewSignatureRequestResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgNewSignatureRequestResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgNewSignatureRequestResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgNewSignatureRequestResponse.Merge(m, src)
}
func (m *MsgNewSignatureRequestResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgNewSignatureRequestResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgNewSignatureRequestResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgNewSignatureRequestResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MsgNewWalletRequest)(nil), "fusionchain.treasury.MsgNewWalletRequest")
	proto.RegisterType((*MsgNewWalletRequestResponse)(nil), "fusionchain.treasury.MsgNewWalletRequestResponse")
	proto.RegisterType((*MsgUpdateWalletRequest)(nil), "fusionchain.treasury.MsgUpdateWalletRequest")
	proto.RegisterType((*MsgUpdateWalletRequestResponse)(nil), "fusionchain.treasury.MsgUpdateWalletRequestResponse")
	proto.RegisterType((*MsgNewWallet)(nil), "fusionchain.treasury.MsgNewWallet")
	proto.RegisterType((*MsgNewSignatureRequest)(nil), "fusionchain.treasury.MsgNewSignatureRequest")
	proto.RegisterType((*MsgNewSignatureRequestResponse)(nil), "fusionchain.treasury.MsgNewSignatureRequestResponse")
}

func init() { proto.RegisterFile("fusionchain/treasury/tx.proto", fileDescriptor_b5f7e7b3c14eb6e0) }

var fileDescriptor_b5f7e7b3c14eb6e0 = []byte{
	// 488 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x54, 0x4f, 0x8b, 0xd3, 0x40,
	0x14, 0x4f, 0xb2, 0xb5, 0xda, 0xd7, 0xba, 0x48, 0x56, 0x24, 0x54, 0x36, 0x64, 0x03, 0x42, 0x17,
	0x76, 0x53, 0xac, 0x82, 0x17, 0x2f, 0xee, 0x69, 0x45, 0xba, 0xe0, 0xac, 0x22, 0x78, 0x29, 0x69,
	0xf2, 0x8c, 0x71, 0x63, 0x66, 0x3a, 0x33, 0x21, 0x9b, 0xb3, 0x5f, 0xc0, 0x8b, 0xdf, 0xc9, 0xe3,
	0x1e, 0x3d, 0x4a, 0x7b, 0xf6, 0x3b, 0x48, 0x93, 0xb4, 0x06, 0x1d, 0xbb, 0xdd, 0x5b, 0xf2, 0xe6,
	0xf7, 0x9b, 0xdf, 0x1f, 0x86, 0x07, 0xfb, 0x1f, 0x32, 0x11, 0xd3, 0x34, 0xf8, 0xe8, 0xc7, 0xe9,
	0x50, 0x72, 0xf4, 0x45, 0xc6, 0x8b, 0xa1, 0xbc, 0xf4, 0x18, 0xa7, 0x92, 0x9a, 0xf7, 0x1b, 0xc7,
	0xde, 0xea, 0xb8, 0x7f, 0xa0, 0x24, 0xe5, 0x7e, 0x92, 0xa0, 0xac, 0x88, 0xee, 0x37, 0x1d, 0xf6,
	0xc6, 0x22, 0x3a, 0xc3, 0xfc, 0x5d, 0x39, 0x26, 0x38, 0xcb, 0x50, 0x48, 0xd3, 0x82, 0xdb, 0x01,
	0x47, 0x5f, 0x52, 0x6e, 0xe9, 0x8e, 0x3e, 0xe8, 0x90, 0xd5, 0xaf, 0x79, 0x00, 0xbd, 0x9c, 0xf2,
	0x0b, 0xc1, 0xfc, 0x00, 0x27, 0x71, 0x68, 0x19, 0x8e, 0x3e, 0x68, 0x91, 0xee, 0x7a, 0xf6, 0x32,
	0x34, 0x5f, 0x40, 0xb7, 0x12, 0x99, 0xc8, 0x82, 0xa1, 0xb5, 0xe3, 0xe8, 0x83, 0xdd, 0x91, 0xe3,
	0xa9, 0x3c, 0x7a, 0x95, 0xec, 0x9b, 0x82, 0x21, 0x81, 0x7c, 0xfd, 0xed, 0x1e, 0xc3, 0x43, 0x85,
	0x2d, 0x82, 0x82, 0xd1, 0x54, 0xa0, 0xb9, 0x0b, 0x46, 0x1c, 0x96, 0xce, 0x5a, 0xc4, 0x88, 0x43,
	0xf7, 0x8b, 0x01, 0x0f, 0xc6, 0x22, 0x7a, 0xcb, 0x42, 0x5f, 0xe2, 0xb6, 0x49, 0xf6, 0x01, 0x78,
	0x05, 0xfa, 0x93, 0xa3, 0x53, 0x4f, 0xca, 0x14, 0x6d, 0x21, 0x7d, 0x99, 0x89, 0x3a, 0xc0, 0xe1,
	0xa6, 0x00, 0xb5, 0xda, 0x79, 0x49, 0x20, 0x35, 0xd1, 0x7c, 0x0e, 0xed, 0x2a, 0x93, 0xd5, 0x72,
	0xf4, 0x41, 0x77, 0xe4, 0xaa, 0xaf, 0x68, 0x26, 0x3d, 0xd5, 0x48, 0xcd, 0x31, 0x1f, 0xc1, 0x5d,
	0x8e, 0x9f, 0x30, 0x90, 0x93, 0x25, 0x90, 0xa6, 0xd6, 0xad, 0xa5, 0xff, 0x53, 0x8d, 0xf4, 0xaa,
	0x31, 0x29, 0xa7, 0x27, 0x77, 0xa0, 0xcd, 0x51, 0x64, 0x89, 0x74, 0x1d, 0xb0, 0xd5, 0x25, 0xac,
	0x7a, 0x73, 0x8f, 0xa1, 0xd7, 0x14, 0x5b, 0x56, 0xc0, 0xb2, 0x69, 0x12, 0x07, 0x93, 0x0b, 0x2c,
	0xca, 0x0a, 0x7a, 0xa4, 0x53, 0x4d, 0x5e, 0x61, 0xe1, 0x8e, 0xca, 0x56, 0xcf, 0x30, 0x3f, 0x8f,
	0xa3, 0xd4, 0x97, 0x19, 0xc7, 0x6b, 0x5b, 0xad, 0x4d, 0x28, 0x38, 0x2b, 0x13, 0xa3, 0x5f, 0x06,
	0xec, 0x8c, 0x45, 0x64, 0x32, 0xb8, 0xf7, 0xcf, 0xbb, 0x3b, 0xbc, 0xbe, 0xa1, 0x1a, 0xda, 0x7f,
	0xbc, 0x35, 0x74, 0xfd, 0x6c, 0x0a, 0xd8, 0x53, 0x3d, 0x91, 0xa3, 0xff, 0xde, 0xa4, 0x40, 0xf7,
	0x9f, 0xde, 0x04, 0xdd, 0x94, 0x56, 0xf5, 0x78, 0xb4, 0x29, 0xc4, 0xdf, 0xe8, 0x0d, 0xd2, 0x1b,
	0xfa, 0x3e, 0x79, 0xfd, 0x7d, 0x6e, 0xeb, 0x57, 0x73, 0x5b, 0xff, 0x39, 0xb7, 0xf5, 0xaf, 0x0b,
	0x5b, 0xbb, 0x5a, 0xd8, 0xda, 0x8f, 0x85, 0xad, 0xbd, 0x7f, 0x16, 0xc5, 0x32, 0xf1, 0xa7, 0xde,
	0x8c, 0x63, 0x48, 0xbd, 0x80, 0x7e, 0x1e, 0xce, 0x78, 0x48, 0xab, 0x7d, 0xd1, 0xdc, 0x1d, 0x97,
	0x8d, 0x95, 0x53, 0x30, 0x14, 0xd3, 0x76, 0xb9, 0x3d, 0x9e, 0xfc, 0x0e, 0x00, 0x00, 0xff, 0xff,
	0x9d, 0x7a, 0x46, 0xb4, 0x97, 0x04, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	// Request a new wallet to the MPC network, the wallet will belong to the
	// specified workspace.
	NewWalletRequest(ctx context.Context, in *MsgNewWalletRequest, opts ...grpc.CallOption) (*MsgNewWalletRequestResponse, error)
	// Update an existing request by writing a result into it. This message is
	// called by MPC network nodes.
	UpdateWalletRequest(ctx context.Context, in *MsgUpdateWalletRequest, opts ...grpc.CallOption) (*MsgUpdateWalletRequestResponse, error)
	// Request a new signature
	NewSignatureRequest(ctx context.Context, in *MsgNewSignatureRequest, opts ...grpc.CallOption) (*MsgNewSignatureRequestResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) NewWalletRequest(ctx context.Context, in *MsgNewWalletRequest, opts ...grpc.CallOption) (*MsgNewWalletRequestResponse, error) {
	out := new(MsgNewWalletRequestResponse)
	err := c.cc.Invoke(ctx, "/fusionchain.treasury.Msg/NewWalletRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateWalletRequest(ctx context.Context, in *MsgUpdateWalletRequest, opts ...grpc.CallOption) (*MsgUpdateWalletRequestResponse, error) {
	out := new(MsgUpdateWalletRequestResponse)
	err := c.cc.Invoke(ctx, "/fusionchain.treasury.Msg/UpdateWalletRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) NewSignatureRequest(ctx context.Context, in *MsgNewSignatureRequest, opts ...grpc.CallOption) (*MsgNewSignatureRequestResponse, error) {
	out := new(MsgNewSignatureRequestResponse)
	err := c.cc.Invoke(ctx, "/fusionchain.treasury.Msg/NewSignatureRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	// Request a new wallet to the MPC network, the wallet will belong to the
	// specified workspace.
	NewWalletRequest(context.Context, *MsgNewWalletRequest) (*MsgNewWalletRequestResponse, error)
	// Update an existing request by writing a result into it. This message is
	// called by MPC network nodes.
	UpdateWalletRequest(context.Context, *MsgUpdateWalletRequest) (*MsgUpdateWalletRequestResponse, error)
	// Request a new signature
	NewSignatureRequest(context.Context, *MsgNewSignatureRequest) (*MsgNewSignatureRequestResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) NewWalletRequest(ctx context.Context, req *MsgNewWalletRequest) (*MsgNewWalletRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewWalletRequest not implemented")
}
func (*UnimplementedMsgServer) UpdateWalletRequest(ctx context.Context, req *MsgUpdateWalletRequest) (*MsgUpdateWalletRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateWalletRequest not implemented")
}
func (*UnimplementedMsgServer) NewSignatureRequest(ctx context.Context, req *MsgNewSignatureRequest) (*MsgNewSignatureRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewSignatureRequest not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_NewWalletRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgNewWalletRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).NewWalletRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fusionchain.treasury.Msg/NewWalletRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).NewWalletRequest(ctx, req.(*MsgNewWalletRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateWalletRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateWalletRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateWalletRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fusionchain.treasury.Msg/UpdateWalletRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateWalletRequest(ctx, req.(*MsgUpdateWalletRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_NewSignatureRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgNewSignatureRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).NewSignatureRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fusionchain.treasury.Msg/NewSignatureRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).NewSignatureRequest(ctx, req.(*MsgNewSignatureRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "fusionchain.treasury.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "NewWalletRequest",
			Handler:    _Msg_NewWalletRequest_Handler,
		},
		{
			MethodName: "UpdateWalletRequest",
			Handler:    _Msg_UpdateWalletRequest_Handler,
		},
		{
			MethodName: "NewSignatureRequest",
			Handler:    _Msg_NewSignatureRequest_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "fusionchain/treasury/tx.proto",
}

func (m *MsgNewWalletRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgNewWalletRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgNewWalletRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.WalletType != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.WalletType))
		i--
		dAtA[i] = 0x18
	}
	if m.WorkspaceId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.WorkspaceId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgNewWalletRequestResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgNewWalletRequestResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgNewWalletRequestResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateWalletRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateWalletRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateWalletRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Result != nil {
		{
			size := m.Result.Size()
			i -= size
			if _, err := m.Result.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.Status != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x18
	}
	if m.RequestId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.RequestId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateWalletRequest_Wallet) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateWalletRequest_Wallet) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Wallet != nil {
		{
			size, err := m.Wallet.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *MsgUpdateWalletRequest_RejectReason) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateWalletRequest_RejectReason) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.RejectReason)
	copy(dAtA[i:], m.RejectReason)
	i = encodeVarintTx(dAtA, i, uint64(len(m.RejectReason)))
	i--
	dAtA[i] = 0x2a
	return len(dAtA) - i, nil
}
func (m *MsgUpdateWalletRequestResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateWalletRequestResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateWalletRequestResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgNewWallet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgNewWallet) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgNewWallet) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PublicKey) > 0 {
		i -= len(m.PublicKey)
		copy(dAtA[i:], m.PublicKey)
		i = encodeVarintTx(dAtA, i, uint64(len(m.PublicKey)))
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}

func (m *MsgNewSignatureRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgNewSignatureRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgNewSignatureRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgNewSignatureRequestResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgNewSignatureRequestResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgNewSignatureRequestResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgNewWalletRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.WorkspaceId != 0 {
		n += 1 + sovTx(uint64(m.WorkspaceId))
	}
	if m.WalletType != 0 {
		n += 1 + sovTx(uint64(m.WalletType))
	}
	return n
}

func (m *MsgNewWalletRequestResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovTx(uint64(m.Id))
	}
	return n
}

func (m *MsgUpdateWalletRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.RequestId != 0 {
		n += 1 + sovTx(uint64(m.RequestId))
	}
	if m.Status != 0 {
		n += 1 + sovTx(uint64(m.Status))
	}
	if m.Result != nil {
		n += m.Result.Size()
	}
	return n
}

func (m *MsgUpdateWalletRequest_Wallet) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Wallet != nil {
		l = m.Wallet.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}
func (m *MsgUpdateWalletRequest_RejectReason) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RejectReason)
	n += 1 + l + sovTx(uint64(l))
	return n
}
func (m *MsgUpdateWalletRequestResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgNewWallet) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PublicKey)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgNewSignatureRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgNewSignatureRequestResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgNewWalletRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgNewWalletRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgNewWalletRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkspaceId", wireType)
			}
			m.WorkspaceId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WorkspaceId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WalletType", wireType)
			}
			m.WalletType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WalletType |= WalletType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgNewWalletRequestResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgNewWalletRequestResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgNewWalletRequestResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateWalletRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateWalletRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateWalletRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestId", wireType)
			}
			m.RequestId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RequestId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= WalletRequestStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Wallet", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &MsgNewWallet{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Result = &MsgUpdateWalletRequest_Wallet{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RejectReason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Result = &MsgUpdateWalletRequest_RejectReason{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateWalletRequestResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateWalletRequestResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateWalletRequestResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgNewWallet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgNewWallet: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgNewWallet: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PublicKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PublicKey = append(m.PublicKey[:0], dAtA[iNdEx:postIndex]...)
			if m.PublicKey == nil {
				m.PublicKey = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgNewSignatureRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgNewSignatureRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgNewSignatureRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgNewSignatureRequestResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgNewSignatureRequestResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgNewSignatureRequestResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
