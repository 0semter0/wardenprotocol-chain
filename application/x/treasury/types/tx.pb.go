// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: fusionchain/treasury/tx.proto

package types

import (
	context "context"
	fmt "fmt"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type MsgNewKeyRequest struct {
	Creator     string  `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	WorkspaceId uint64  `protobuf:"varint,2,opt,name=workspace_id,json=workspaceId,proto3" json:"workspace_id,omitempty"`
	KeyType     KeyType `protobuf:"varint,3,opt,name=key_type,json=keyType,proto3,enum=fusionchain.treasury.KeyType" json:"key_type,omitempty"`
}

func (m *MsgNewKeyRequest) Reset()         { *m = MsgNewKeyRequest{} }
func (m *MsgNewKeyRequest) String() string { return proto.CompactTextString(m) }
func (*MsgNewKeyRequest) ProtoMessage()    {}
func (*MsgNewKeyRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b5f7e7b3c14eb6e0, []int{0}
}
func (m *MsgNewKeyRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgNewKeyRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgNewKeyRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgNewKeyRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgNewKeyRequest.Merge(m, src)
}
func (m *MsgNewKeyRequest) XXX_Size() int {
	return m.Size()
}
func (m *MsgNewKeyRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgNewKeyRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MsgNewKeyRequest proto.InternalMessageInfo

func (m *MsgNewKeyRequest) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgNewKeyRequest) GetWorkspaceId() uint64 {
	if m != nil {
		return m.WorkspaceId
	}
	return 0
}

func (m *MsgNewKeyRequest) GetKeyType() KeyType {
	if m != nil {
		return m.KeyType
	}
	return KeyType_KEY_TYPE_UNSPECIFIED
}

type MsgNewKeyRequestResponse struct {
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *MsgNewKeyRequestResponse) Reset()         { *m = MsgNewKeyRequestResponse{} }
func (m *MsgNewKeyRequestResponse) String() string { return proto.CompactTextString(m) }
func (*MsgNewKeyRequestResponse) ProtoMessage()    {}
func (*MsgNewKeyRequestResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b5f7e7b3c14eb6e0, []int{1}
}
func (m *MsgNewKeyRequestResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgNewKeyRequestResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgNewKeyRequestResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgNewKeyRequestResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgNewKeyRequestResponse.Merge(m, src)
}
func (m *MsgNewKeyRequestResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgNewKeyRequestResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgNewKeyRequestResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgNewKeyRequestResponse proto.InternalMessageInfo

func (m *MsgNewKeyRequestResponse) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type MsgNewKey struct {
	PublicKey []byte `protobuf:"bytes,1,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"`
}

func (m *MsgNewKey) Reset()         { *m = MsgNewKey{} }
func (m *MsgNewKey) String() string { return proto.CompactTextString(m) }
func (*MsgNewKey) ProtoMessage()    {}
func (*MsgNewKey) Descriptor() ([]byte, []int) {
	return fileDescriptor_b5f7e7b3c14eb6e0, []int{2}
}
func (m *MsgNewKey) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgNewKey) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgNewKey.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgNewKey) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgNewKey.Merge(m, src)
}
func (m *MsgNewKey) XXX_Size() int {
	return m.Size()
}
func (m *MsgNewKey) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgNewKey.DiscardUnknown(m)
}

var xxx_messageInfo_MsgNewKey proto.InternalMessageInfo

func (m *MsgNewKey) GetPublicKey() []byte {
	if m != nil {
		return m.PublicKey
	}
	return nil
}

type MsgUpdateKeyRequest struct {
	Creator   string           `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	RequestId uint64           `protobuf:"varint,2,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	Status    KeyRequestStatus `protobuf:"varint,3,opt,name=status,proto3,enum=fusionchain.treasury.KeyRequestStatus" json:"status,omitempty"`
	// Holds the result of the request. If status is approved, the result will
	// contain the requested key's public key that can be used for signing
	// payloads.
	// If status is rejected, the result will contain the reason.
	//
	// Types that are valid to be assigned to Result:
	//	*MsgUpdateKeyRequest_Key
	//	*MsgUpdateKeyRequest_RejectReason
	Result isMsgUpdateKeyRequest_Result `protobuf_oneof:"result"`
}

func (m *MsgUpdateKeyRequest) Reset()         { *m = MsgUpdateKeyRequest{} }
func (m *MsgUpdateKeyRequest) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateKeyRequest) ProtoMessage()    {}
func (*MsgUpdateKeyRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b5f7e7b3c14eb6e0, []int{3}
}
func (m *MsgUpdateKeyRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateKeyRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateKeyRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateKeyRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateKeyRequest.Merge(m, src)
}
func (m *MsgUpdateKeyRequest) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateKeyRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateKeyRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateKeyRequest proto.InternalMessageInfo

type isMsgUpdateKeyRequest_Result interface {
	isMsgUpdateKeyRequest_Result()
	MarshalTo([]byte) (int, error)
	Size() int
}

type MsgUpdateKeyRequest_Key struct {
	Key *MsgNewKey `protobuf:"bytes,4,opt,name=key,proto3,oneof" json:"key,omitempty"`
}
type MsgUpdateKeyRequest_RejectReason struct {
	RejectReason string `protobuf:"bytes,5,opt,name=reject_reason,json=rejectReason,proto3,oneof" json:"reject_reason,omitempty"`
}

func (*MsgUpdateKeyRequest_Key) isMsgUpdateKeyRequest_Result()          {}
func (*MsgUpdateKeyRequest_RejectReason) isMsgUpdateKeyRequest_Result() {}

func (m *MsgUpdateKeyRequest) GetResult() isMsgUpdateKeyRequest_Result {
	if m != nil {
		return m.Result
	}
	return nil
}

func (m *MsgUpdateKeyRequest) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgUpdateKeyRequest) GetRequestId() uint64 {
	if m != nil {
		return m.RequestId
	}
	return 0
}

func (m *MsgUpdateKeyRequest) GetStatus() KeyRequestStatus {
	if m != nil {
		return m.Status
	}
	return KeyRequestStatus_KEY_REQUEST_STATUS_UNSPECIFIED
}

func (m *MsgUpdateKeyRequest) GetKey() *MsgNewKey {
	if x, ok := m.GetResult().(*MsgUpdateKeyRequest_Key); ok {
		return x.Key
	}
	return nil
}

func (m *MsgUpdateKeyRequest) GetRejectReason() string {
	if x, ok := m.GetResult().(*MsgUpdateKeyRequest_RejectReason); ok {
		return x.RejectReason
	}
	return ""
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*MsgUpdateKeyRequest) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*MsgUpdateKeyRequest_Key)(nil),
		(*MsgUpdateKeyRequest_RejectReason)(nil),
	}
}

type MsgUpdateKeyRequestResponse struct {
}

func (m *MsgUpdateKeyRequestResponse) Reset()         { *m = MsgUpdateKeyRequestResponse{} }
func (m *MsgUpdateKeyRequestResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateKeyRequestResponse) ProtoMessage()    {}
func (*MsgUpdateKeyRequestResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b5f7e7b3c14eb6e0, []int{4}
}
func (m *MsgUpdateKeyRequestResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateKeyRequestResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateKeyRequestResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateKeyRequestResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateKeyRequestResponse.Merge(m, src)
}
func (m *MsgUpdateKeyRequestResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateKeyRequestResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateKeyRequestResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateKeyRequestResponse proto.InternalMessageInfo

type MsgNewSignatureRequest struct {
	Creator        string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	KeyId          uint64 `protobuf:"varint,2,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`
	DataForSigning []byte `protobuf:"bytes,3,opt,name=data_for_signing,json=dataForSigning,proto3" json:"data_for_signing,omitempty"`
}

func (m *MsgNewSignatureRequest) Reset()         { *m = MsgNewSignatureRequest{} }
func (m *MsgNewSignatureRequest) String() string { return proto.CompactTextString(m) }
func (*MsgNewSignatureRequest) ProtoMessage()    {}
func (*MsgNewSignatureRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b5f7e7b3c14eb6e0, []int{5}
}
func (m *MsgNewSignatureRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgNewSignatureRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgNewSignatureRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgNewSignatureRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgNewSignatureRequest.Merge(m, src)
}
func (m *MsgNewSignatureRequest) XXX_Size() int {
	return m.Size()
}
func (m *MsgNewSignatureRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgNewSignatureRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MsgNewSignatureRequest proto.InternalMessageInfo

func (m *MsgNewSignatureRequest) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgNewSignatureRequest) GetKeyId() uint64 {
	if m != nil {
		return m.KeyId
	}
	return 0
}

func (m *MsgNewSignatureRequest) GetDataForSigning() []byte {
	if m != nil {
		return m.DataForSigning
	}
	return nil
}

type MsgNewSignatureRequestResponse struct {
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *MsgNewSignatureRequestResponse) Reset()         { *m = MsgNewSignatureRequestResponse{} }
func (m *MsgNewSignatureRequestResponse) String() string { return proto.CompactTextString(m) }
func (*MsgNewSignatureRequestResponse) ProtoMessage()    {}
func (*MsgNewSignatureRequestResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b5f7e7b3c14eb6e0, []int{6}
}
func (m *MsgNewSignatureRequestResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgNewSignatureRequestResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgNewSignatureRequestResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgNewSignatureRequestResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgNewSignatureRequestResponse.Merge(m, src)
}
func (m *MsgNewSignatureRequestResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgNewSignatureRequestResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgNewSignatureRequestResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgNewSignatureRequestResponse proto.InternalMessageInfo

func (m *MsgNewSignatureRequestResponse) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type MsgSignedData struct {
	SignedData []byte `protobuf:"bytes,1,opt,name=signed_data,json=signedData,proto3" json:"signed_data,omitempty"`
}

func (m *MsgSignedData) Reset()         { *m = MsgSignedData{} }
func (m *MsgSignedData) String() string { return proto.CompactTextString(m) }
func (*MsgSignedData) ProtoMessage()    {}
func (*MsgSignedData) Descriptor() ([]byte, []int) {
	return fileDescriptor_b5f7e7b3c14eb6e0, []int{7}
}
func (m *MsgSignedData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSignedData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSignedData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSignedData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSignedData.Merge(m, src)
}
func (m *MsgSignedData) XXX_Size() int {
	return m.Size()
}
func (m *MsgSignedData) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSignedData.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSignedData proto.InternalMessageInfo

func (m *MsgSignedData) GetSignedData() []byte {
	if m != nil {
		return m.SignedData
	}
	return nil
}

type MsgFulfillSignatureRequest struct {
	Creator   string            `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	RequestId uint64            `protobuf:"varint,2,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	Status    SignRequestStatus `protobuf:"varint,3,opt,name=status,proto3,enum=fusionchain.treasury.SignRequestStatus" json:"status,omitempty"`
	// Holds the result of the request. If status is approved, the result will
	// contain the signed data that was requested
	// If status is rejected, the result will contain the reason.
	//
	// Types that are valid to be assigned to Result:
	//	*MsgFulfillSignatureRequest_Payload
	//	*MsgFulfillSignatureRequest_RejectReason
	Result isMsgFulfillSignatureRequest_Result `protobuf_oneof:"result"`
}

func (m *MsgFulfillSignatureRequest) Reset()         { *m = MsgFulfillSignatureRequest{} }
func (m *MsgFulfillSignatureRequest) String() string { return proto.CompactTextString(m) }
func (*MsgFulfillSignatureRequest) ProtoMessage()    {}
func (*MsgFulfillSignatureRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b5f7e7b3c14eb6e0, []int{8}
}
func (m *MsgFulfillSignatureRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgFulfillSignatureRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgFulfillSignatureRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgFulfillSignatureRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgFulfillSignatureRequest.Merge(m, src)
}
func (m *MsgFulfillSignatureRequest) XXX_Size() int {
	return m.Size()
}
func (m *MsgFulfillSignatureRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgFulfillSignatureRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MsgFulfillSignatureRequest proto.InternalMessageInfo

type isMsgFulfillSignatureRequest_Result interface {
	isMsgFulfillSignatureRequest_Result()
	MarshalTo([]byte) (int, error)
	Size() int
}

type MsgFulfillSignatureRequest_Payload struct {
	Payload *MsgSignedData `protobuf:"bytes,4,opt,name=payload,proto3,oneof" json:"payload,omitempty"`
}
type MsgFulfillSignatureRequest_RejectReason struct {
	RejectReason string `protobuf:"bytes,5,opt,name=reject_reason,json=rejectReason,proto3,oneof" json:"reject_reason,omitempty"`
}

func (*MsgFulfillSignatureRequest_Payload) isMsgFulfillSignatureRequest_Result()      {}
func (*MsgFulfillSignatureRequest_RejectReason) isMsgFulfillSignatureRequest_Result() {}

func (m *MsgFulfillSignatureRequest) GetResult() isMsgFulfillSignatureRequest_Result {
	if m != nil {
		return m.Result
	}
	return nil
}

func (m *MsgFulfillSignatureRequest) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgFulfillSignatureRequest) GetRequestId() uint64 {
	if m != nil {
		return m.RequestId
	}
	return 0
}

func (m *MsgFulfillSignatureRequest) GetStatus() SignRequestStatus {
	if m != nil {
		return m.Status
	}
	return SignRequestStatus_SIGN_REQUEST_STATUS_UNSPECIFIED
}

func (m *MsgFulfillSignatureRequest) GetPayload() *MsgSignedData {
	if x, ok := m.GetResult().(*MsgFulfillSignatureRequest_Payload); ok {
		return x.Payload
	}
	return nil
}

func (m *MsgFulfillSignatureRequest) GetRejectReason() string {
	if x, ok := m.GetResult().(*MsgFulfillSignatureRequest_RejectReason); ok {
		return x.RejectReason
	}
	return ""
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*MsgFulfillSignatureRequest) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*MsgFulfillSignatureRequest_Payload)(nil),
		(*MsgFulfillSignatureRequest_RejectReason)(nil),
	}
}

type MsgFulfillSignatureRequestResponse struct {
}

func (m *MsgFulfillSignatureRequestResponse) Reset()         { *m = MsgFulfillSignatureRequestResponse{} }
func (m *MsgFulfillSignatureRequestResponse) String() string { return proto.CompactTextString(m) }
func (*MsgFulfillSignatureRequestResponse) ProtoMessage()    {}
func (*MsgFulfillSignatureRequestResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b5f7e7b3c14eb6e0, []int{9}
}
func (m *MsgFulfillSignatureRequestResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgFulfillSignatureRequestResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgFulfillSignatureRequestResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgFulfillSignatureRequestResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgFulfillSignatureRequestResponse.Merge(m, src)
}
func (m *MsgFulfillSignatureRequestResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgFulfillSignatureRequestResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgFulfillSignatureRequestResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgFulfillSignatureRequestResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MsgNewKeyRequest)(nil), "fusionchain.treasury.MsgNewKeyRequest")
	proto.RegisterType((*MsgNewKeyRequestResponse)(nil), "fusionchain.treasury.MsgNewKeyRequestResponse")
	proto.RegisterType((*MsgNewKey)(nil), "fusionchain.treasury.MsgNewKey")
	proto.RegisterType((*MsgUpdateKeyRequest)(nil), "fusionchain.treasury.MsgUpdateKeyRequest")
	proto.RegisterType((*MsgUpdateKeyRequestResponse)(nil), "fusionchain.treasury.MsgUpdateKeyRequestResponse")
	proto.RegisterType((*MsgNewSignatureRequest)(nil), "fusionchain.treasury.MsgNewSignatureRequest")
	proto.RegisterType((*MsgNewSignatureRequestResponse)(nil), "fusionchain.treasury.MsgNewSignatureRequestResponse")
	proto.RegisterType((*MsgSignedData)(nil), "fusionchain.treasury.MsgSignedData")
	proto.RegisterType((*MsgFulfillSignatureRequest)(nil), "fusionchain.treasury.MsgFulfillSignatureRequest")
	proto.RegisterType((*MsgFulfillSignatureRequestResponse)(nil), "fusionchain.treasury.MsgFulfillSignatureRequestResponse")
}

func init() { proto.RegisterFile("fusionchain/treasury/tx.proto", fileDescriptor_b5f7e7b3c14eb6e0) }

var fileDescriptor_b5f7e7b3c14eb6e0 = []byte{
	// 645 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x95, 0xdd, 0x4e, 0xd4, 0x40,
	0x14, 0xc7, 0xb7, 0xbb, 0xb0, 0xb0, 0x87, 0x85, 0x90, 0xe2, 0xc7, 0xa6, 0x66, 0xcb, 0x5a, 0x15,
	0x57, 0x62, 0x0a, 0x82, 0x89, 0x5c, 0x49, 0x42, 0x0c, 0x81, 0x90, 0x35, 0x71, 0xd0, 0x1b, 0x6f,
	0x9a, 0xa1, 0x1d, 0x6a, 0xdd, 0xd2, 0x29, 0x33, 0xd3, 0xc0, 0x3c, 0x80, 0x89, 0xde, 0xf9, 0x58,
	0x5e, 0x72, 0xe9, 0xa5, 0x61, 0x5f, 0xc1, 0x07, 0x30, 0xfd, 0x04, 0xd7, 0x56, 0xd8, 0xbb, 0x9d,
	0x33, 0xbf, 0x33, 0xe7, 0xe3, 0x7f, 0xb6, 0x07, 0xba, 0xc7, 0x11, 0xf7, 0x68, 0x60, 0x7f, 0xc2,
	0x5e, 0xb0, 0x26, 0x18, 0xc1, 0x3c, 0x62, 0x72, 0x4d, 0x9c, 0x9b, 0x21, 0xa3, 0x82, 0xaa, 0x77,
	0xae, 0x5d, 0x9b, 0xf9, 0xb5, 0xa6, 0x97, 0x3a, 0x0d, 0x89, 0x4c, 0xbd, 0x34, 0xa3, 0xf4, 0xfe,
	0x24, 0xb4, 0xb9, 0xe7, 0x06, 0x29, 0x63, 0x7c, 0x53, 0x60, 0x71, 0xc0, 0xdd, 0xb7, 0xe4, 0xec,
	0x80, 0x48, 0x44, 0x4e, 0x23, 0xc2, 0x85, 0xda, 0x81, 0x19, 0x9b, 0x11, 0x2c, 0x28, 0xeb, 0x28,
	0x3d, 0xa5, 0xdf, 0x42, 0xf9, 0x51, 0x7d, 0x08, 0xed, 0x33, 0xca, 0x86, 0x3c, 0xc4, 0x36, 0xb1,
	0x3c, 0xa7, 0x53, 0xef, 0x29, 0xfd, 0x29, 0x34, 0x57, 0xd8, 0xf6, 0x1d, 0x75, 0x0b, 0x66, 0x87,
	0x44, 0x5a, 0x42, 0x86, 0xa4, 0xd3, 0xe8, 0x29, 0xfd, 0x85, 0x8d, 0xae, 0x59, 0x96, 0xbe, 0x79,
	0x40, 0xe4, 0x7b, 0x19, 0x12, 0x34, 0x33, 0x4c, 0x7f, 0x18, 0xab, 0xd0, 0x19, 0x4f, 0x05, 0x11,
	0x1e, 0xd2, 0x80, 0x13, 0x75, 0x01, 0xea, 0x9e, 0x93, 0x64, 0x33, 0x85, 0xea, 0x9e, 0x63, 0xac,
	0x42, 0xab, 0x60, 0xd5, 0x2e, 0x40, 0x18, 0x1d, 0xf9, 0x9e, 0x6d, 0x0d, 0x89, 0x4c, 0xa0, 0x36,
	0x6a, 0xa5, 0x96, 0x03, 0x22, 0x8d, 0xdf, 0x0a, 0x2c, 0x0d, 0xb8, 0xfb, 0x21, 0x74, 0xb0, 0x20,
	0xb7, 0x2a, 0xb3, 0x0b, 0xc0, 0x52, 0xe8, 0xaa, 0xc8, 0x56, 0x66, 0xd9, 0x77, 0xd4, 0xd7, 0xd0,
	0xe4, 0x02, 0x8b, 0x88, 0x67, 0x05, 0xae, 0x54, 0x16, 0x98, 0x85, 0x3a, 0x4c, 0x68, 0x94, 0x79,
	0xa9, 0x9b, 0xd0, 0x88, 0x13, 0x9d, 0xea, 0x29, 0xfd, 0xb9, 0x8d, 0xe5, 0x72, 0xe7, 0xa2, 0xba,
	0xbd, 0x1a, 0x8a, 0x69, 0xf5, 0x09, 0xcc, 0x33, 0xf2, 0x99, 0xd8, 0xc2, 0x8a, 0x11, 0x1a, 0x74,
	0xa6, 0xe3, 0x9c, 0xf7, 0x6a, 0xa8, 0x9d, 0x9a, 0x51, 0x62, 0xdd, 0x99, 0x85, 0x26, 0x23, 0x3c,
	0xf2, 0x85, 0xd1, 0x85, 0x07, 0x25, 0x55, 0xe7, 0x1d, 0x35, 0x38, 0xdc, 0x4b, 0x63, 0x1c, 0x7a,
	0x6e, 0x80, 0x45, 0xc4, 0xc8, 0xcd, 0x7d, 0xb9, 0x0b, 0xcd, 0x58, 0xdb, 0xa2, 0x27, 0xd3, 0x43,
	0x22, 0xf7, 0x1d, 0xb5, 0x0f, 0x8b, 0x0e, 0x16, 0xd8, 0x3a, 0xa6, 0xcc, 0x8a, 0x67, 0xcb, 0x0b,
	0xdc, 0xa4, 0x33, 0x6d, 0xb4, 0x10, 0xdb, 0x77, 0x29, 0x3b, 0x4c, 0xad, 0xc6, 0x3a, 0xe8, 0xe5,
	0x41, 0x2b, 0x85, 0x5e, 0x87, 0xf9, 0x01, 0x77, 0x63, 0x9c, 0x38, 0x6f, 0xb0, 0xc0, 0xea, 0x32,
	0xcc, 0xf1, 0xe4, 0x64, 0xc5, 0x6f, 0x67, 0x6a, 0x03, 0x2f, 0x00, 0xe3, 0x6b, 0x1d, 0xb4, 0x01,
	0x77, 0x77, 0x23, 0xff, 0xd8, 0xf3, 0xfd, 0x09, 0xaa, 0xbb, 0x41, 0xf5, 0xed, 0x31, 0xd5, 0x9f,
	0x96, 0x0b, 0x17, 0x07, 0x2c, 0x97, 0x7d, 0x1b, 0x66, 0x42, 0x2c, 0x7d, 0x8a, 0x9d, 0x4c, 0xfa,
	0x47, 0x95, 0xd2, 0x5f, 0xd5, 0xbb, 0x57, 0x43, 0xb9, 0xd7, 0xe4, 0x23, 0xf0, 0x18, 0x8c, 0xea,
	0x4e, 0xe4, 0x2d, 0xdf, 0x18, 0x35, 0xa0, 0x31, 0xe0, 0xae, 0xea, 0xc2, 0xfc, 0xdf, 0xdf, 0x81,
	0x95, 0x1b, 0x46, 0x33, 0xe3, 0x34, 0xf3, 0x76, 0x5c, 0xa1, 0x71, 0x08, 0x8b, 0xff, 0xfc, 0x19,
	0x9f, 0x55, 0xbe, 0x31, 0x8e, 0x6a, 0x2f, 0x6e, 0x8d, 0x16, 0x11, 0x25, 0x2c, 0x95, 0x4d, 0xfa,
	0xf3, 0xff, 0x25, 0x3e, 0x4e, 0x6b, 0x2f, 0x27, 0xa1, 0x8b, 0xd0, 0x5f, 0x14, 0xb8, 0x5f, 0x35,
	0x8b, 0xeb, 0x95, 0x2f, 0x56, 0x78, 0x68, 0x5b, 0x93, 0x7a, 0xe4, 0x79, 0xec, 0xbc, 0xfb, 0x71,
	0xa9, 0x2b, 0x17, 0x97, 0xba, 0xf2, 0xeb, 0x52, 0x57, 0xbe, 0x8f, 0xf4, 0xda, 0xc5, 0x48, 0xaf,
	0xfd, 0x1c, 0xe9, 0xb5, 0x8f, 0xaf, 0x5c, 0x4f, 0xf8, 0xf8, 0xc8, 0x3c, 0x65, 0xc4, 0xa1, 0xa6,
	0x4d, 0x4f, 0xd6, 0x4e, 0x99, 0x43, 0xd3, 0xb5, 0x71, 0x7d, 0x85, 0x9c, 0x5f, 0xdb, 0x4c, 0x32,
	0x24, 0xfc, 0xa8, 0x99, 0xec, 0x90, 0xcd, 0x3f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x21, 0x5b, 0xfd,
	0x77, 0xbe, 0x06, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	// Request a new key to the MPC network, the key will belong to the
	// specified workspace.
	NewKeyRequest(ctx context.Context, in *MsgNewKeyRequest, opts ...grpc.CallOption) (*MsgNewKeyRequestResponse, error)
	// Update an existing request by writing a result into it. This message is
	// called by MPC network nodes.
	UpdateKeyRequest(ctx context.Context, in *MsgUpdateKeyRequest, opts ...grpc.CallOption) (*MsgUpdateKeyRequestResponse, error)
	// Request a new signature
	NewSignatureRequest(ctx context.Context, in *MsgNewSignatureRequest, opts ...grpc.CallOption) (*MsgNewSignatureRequestResponse, error)
	// Fulfill a signature request
	FulfillSignatureRequest(ctx context.Context, in *MsgFulfillSignatureRequest, opts ...grpc.CallOption) (*MsgFulfillSignatureRequestResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) NewKeyRequest(ctx context.Context, in *MsgNewKeyRequest, opts ...grpc.CallOption) (*MsgNewKeyRequestResponse, error) {
	out := new(MsgNewKeyRequestResponse)
	err := c.cc.Invoke(ctx, "/fusionchain.treasury.Msg/NewKeyRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateKeyRequest(ctx context.Context, in *MsgUpdateKeyRequest, opts ...grpc.CallOption) (*MsgUpdateKeyRequestResponse, error) {
	out := new(MsgUpdateKeyRequestResponse)
	err := c.cc.Invoke(ctx, "/fusionchain.treasury.Msg/UpdateKeyRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) NewSignatureRequest(ctx context.Context, in *MsgNewSignatureRequest, opts ...grpc.CallOption) (*MsgNewSignatureRequestResponse, error) {
	out := new(MsgNewSignatureRequestResponse)
	err := c.cc.Invoke(ctx, "/fusionchain.treasury.Msg/NewSignatureRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) FulfillSignatureRequest(ctx context.Context, in *MsgFulfillSignatureRequest, opts ...grpc.CallOption) (*MsgFulfillSignatureRequestResponse, error) {
	out := new(MsgFulfillSignatureRequestResponse)
	err := c.cc.Invoke(ctx, "/fusionchain.treasury.Msg/FulfillSignatureRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	// Request a new key to the MPC network, the key will belong to the
	// specified workspace.
	NewKeyRequest(context.Context, *MsgNewKeyRequest) (*MsgNewKeyRequestResponse, error)
	// Update an existing request by writing a result into it. This message is
	// called by MPC network nodes.
	UpdateKeyRequest(context.Context, *MsgUpdateKeyRequest) (*MsgUpdateKeyRequestResponse, error)
	// Request a new signature
	NewSignatureRequest(context.Context, *MsgNewSignatureRequest) (*MsgNewSignatureRequestResponse, error)
	// Fulfill a signature request
	FulfillSignatureRequest(context.Context, *MsgFulfillSignatureRequest) (*MsgFulfillSignatureRequestResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) NewKeyRequest(ctx context.Context, req *MsgNewKeyRequest) (*MsgNewKeyRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewKeyRequest not implemented")
}
func (*UnimplementedMsgServer) UpdateKeyRequest(ctx context.Context, req *MsgUpdateKeyRequest) (*MsgUpdateKeyRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateKeyRequest not implemented")
}
func (*UnimplementedMsgServer) NewSignatureRequest(ctx context.Context, req *MsgNewSignatureRequest) (*MsgNewSignatureRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewSignatureRequest not implemented")
}
func (*UnimplementedMsgServer) FulfillSignatureRequest(ctx context.Context, req *MsgFulfillSignatureRequest) (*MsgFulfillSignatureRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FulfillSignatureRequest not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_NewKeyRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgNewKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).NewKeyRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fusionchain.treasury.Msg/NewKeyRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).NewKeyRequest(ctx, req.(*MsgNewKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateKeyRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateKeyRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fusionchain.treasury.Msg/UpdateKeyRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateKeyRequest(ctx, req.(*MsgUpdateKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_NewSignatureRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgNewSignatureRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).NewSignatureRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fusionchain.treasury.Msg/NewSignatureRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).NewSignatureRequest(ctx, req.(*MsgNewSignatureRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_FulfillSignatureRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgFulfillSignatureRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).FulfillSignatureRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fusionchain.treasury.Msg/FulfillSignatureRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).FulfillSignatureRequest(ctx, req.(*MsgFulfillSignatureRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "fusionchain.treasury.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "NewKeyRequest",
			Handler:    _Msg_NewKeyRequest_Handler,
		},
		{
			MethodName: "UpdateKeyRequest",
			Handler:    _Msg_UpdateKeyRequest_Handler,
		},
		{
			MethodName: "NewSignatureRequest",
			Handler:    _Msg_NewSignatureRequest_Handler,
		},
		{
			MethodName: "FulfillSignatureRequest",
			Handler:    _Msg_FulfillSignatureRequest_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "fusionchain/treasury/tx.proto",
}

func (m *MsgNewKeyRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgNewKeyRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgNewKeyRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.KeyType != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.KeyType))
		i--
		dAtA[i] = 0x18
	}
	if m.WorkspaceId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.WorkspaceId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgNewKeyRequestResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgNewKeyRequestResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgNewKeyRequestResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgNewKey) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgNewKey) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgNewKey) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PublicKey) > 0 {
		i -= len(m.PublicKey)
		copy(dAtA[i:], m.PublicKey)
		i = encodeVarintTx(dAtA, i, uint64(len(m.PublicKey)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateKeyRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateKeyRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateKeyRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Result != nil {
		{
			size := m.Result.Size()
			i -= size
			if _, err := m.Result.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.Status != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x18
	}
	if m.RequestId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.RequestId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateKeyRequest_Key) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateKeyRequest_Key) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Key != nil {
		{
			size, err := m.Key.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *MsgUpdateKeyRequest_RejectReason) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateKeyRequest_RejectReason) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.RejectReason)
	copy(dAtA[i:], m.RejectReason)
	i = encodeVarintTx(dAtA, i, uint64(len(m.RejectReason)))
	i--
	dAtA[i] = 0x2a
	return len(dAtA) - i, nil
}
func (m *MsgUpdateKeyRequestResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateKeyRequestResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateKeyRequestResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgNewSignatureRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgNewSignatureRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgNewSignatureRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DataForSigning) > 0 {
		i -= len(m.DataForSigning)
		copy(dAtA[i:], m.DataForSigning)
		i = encodeVarintTx(dAtA, i, uint64(len(m.DataForSigning)))
		i--
		dAtA[i] = 0x1a
	}
	if m.KeyId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.KeyId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgNewSignatureRequestResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgNewSignatureRequestResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgNewSignatureRequestResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgSignedData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSignedData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSignedData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SignedData) > 0 {
		i -= len(m.SignedData)
		copy(dAtA[i:], m.SignedData)
		i = encodeVarintTx(dAtA, i, uint64(len(m.SignedData)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgFulfillSignatureRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgFulfillSignatureRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgFulfillSignatureRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Result != nil {
		{
			size := m.Result.Size()
			i -= size
			if _, err := m.Result.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.Status != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x18
	}
	if m.RequestId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.RequestId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgFulfillSignatureRequest_Payload) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgFulfillSignatureRequest_Payload) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Payload != nil {
		{
			size, err := m.Payload.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *MsgFulfillSignatureRequest_RejectReason) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgFulfillSignatureRequest_RejectReason) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.RejectReason)
	copy(dAtA[i:], m.RejectReason)
	i = encodeVarintTx(dAtA, i, uint64(len(m.RejectReason)))
	i--
	dAtA[i] = 0x2a
	return len(dAtA) - i, nil
}
func (m *MsgFulfillSignatureRequestResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgFulfillSignatureRequestResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgFulfillSignatureRequestResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgNewKeyRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.WorkspaceId != 0 {
		n += 1 + sovTx(uint64(m.WorkspaceId))
	}
	if m.KeyType != 0 {
		n += 1 + sovTx(uint64(m.KeyType))
	}
	return n
}

func (m *MsgNewKeyRequestResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovTx(uint64(m.Id))
	}
	return n
}

func (m *MsgNewKey) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PublicKey)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgUpdateKeyRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.RequestId != 0 {
		n += 1 + sovTx(uint64(m.RequestId))
	}
	if m.Status != 0 {
		n += 1 + sovTx(uint64(m.Status))
	}
	if m.Result != nil {
		n += m.Result.Size()
	}
	return n
}

func (m *MsgUpdateKeyRequest_Key) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Key != nil {
		l = m.Key.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}
func (m *MsgUpdateKeyRequest_RejectReason) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RejectReason)
	n += 1 + l + sovTx(uint64(l))
	return n
}
func (m *MsgUpdateKeyRequestResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgNewSignatureRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.KeyId != 0 {
		n += 1 + sovTx(uint64(m.KeyId))
	}
	l = len(m.DataForSigning)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgNewSignatureRequestResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovTx(uint64(m.Id))
	}
	return n
}

func (m *MsgSignedData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SignedData)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgFulfillSignatureRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.RequestId != 0 {
		n += 1 + sovTx(uint64(m.RequestId))
	}
	if m.Status != 0 {
		n += 1 + sovTx(uint64(m.Status))
	}
	if m.Result != nil {
		n += m.Result.Size()
	}
	return n
}

func (m *MsgFulfillSignatureRequest_Payload) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Payload != nil {
		l = m.Payload.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}
func (m *MsgFulfillSignatureRequest_RejectReason) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RejectReason)
	n += 1 + l + sovTx(uint64(l))
	return n
}
func (m *MsgFulfillSignatureRequestResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgNewKeyRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgNewKeyRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgNewKeyRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkspaceId", wireType)
			}
			m.WorkspaceId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WorkspaceId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyType", wireType)
			}
			m.KeyType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KeyType |= KeyType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgNewKeyRequestResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgNewKeyRequestResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgNewKeyRequestResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgNewKey) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgNewKey: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgNewKey: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PublicKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PublicKey = append(m.PublicKey[:0], dAtA[iNdEx:postIndex]...)
			if m.PublicKey == nil {
				m.PublicKey = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateKeyRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateKeyRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateKeyRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestId", wireType)
			}
			m.RequestId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RequestId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= KeyRequestStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &MsgNewKey{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Result = &MsgUpdateKeyRequest_Key{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RejectReason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Result = &MsgUpdateKeyRequest_RejectReason{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateKeyRequestResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateKeyRequestResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateKeyRequestResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgNewSignatureRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgNewSignatureRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgNewSignatureRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyId", wireType)
			}
			m.KeyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KeyId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataForSigning", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DataForSigning = append(m.DataForSigning[:0], dAtA[iNdEx:postIndex]...)
			if m.DataForSigning == nil {
				m.DataForSigning = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgNewSignatureRequestResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgNewSignatureRequestResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgNewSignatureRequestResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSignedData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSignedData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSignedData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SignedData", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SignedData = append(m.SignedData[:0], dAtA[iNdEx:postIndex]...)
			if m.SignedData == nil {
				m.SignedData = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgFulfillSignatureRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgFulfillSignatureRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgFulfillSignatureRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestId", wireType)
			}
			m.RequestId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RequestId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= SignRequestStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Payload", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &MsgSignedData{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Result = &MsgFulfillSignatureRequest_Payload{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RejectReason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Result = &MsgFulfillSignatureRequest_RejectReason{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgFulfillSignatureRequestResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgFulfillSignatureRequestResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgFulfillSignatureRequestResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
