// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: fusionchain/treasury/wallet.proto

package types

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// WalletRequestStatus indicates the status of a wallet request.
// A request starts as "pending", waiting to be picked up. Then it can move to
// either "approved" or "rejected", depending on the decision of the MPC nodes.
type WalletRequestStatus int32

const (
	// The request is missing the status field.
	WalletRequestStatus_WALLET_REQUEST_STATUS_UNSPECIFIED WalletRequestStatus = 0
	// The request is waiting to be fulfilled. This is the initial state of a
	// request.
	WalletRequestStatus_WALLET_REQUEST_STATUS_PENDING WalletRequestStatus = 1
	// The request was fulfilled. This is a final state for a request.
	WalletRequestStatus_WALLET_REQUEST_STATUS_APPROVED WalletRequestStatus = 2
	// The request was rejected. This is a final state for a request.
	WalletRequestStatus_WALLET_REQUEST_STATUS_REJECTED WalletRequestStatus = 3
)

var WalletRequestStatus_name = map[int32]string{
	0: "WALLET_REQUEST_STATUS_UNSPECIFIED",
	1: "WALLET_REQUEST_STATUS_PENDING",
	2: "WALLET_REQUEST_STATUS_APPROVED",
	3: "WALLET_REQUEST_STATUS_REJECTED",
}

var WalletRequestStatus_value = map[string]int32{
	"WALLET_REQUEST_STATUS_UNSPECIFIED": 0,
	"WALLET_REQUEST_STATUS_PENDING":     1,
	"WALLET_REQUEST_STATUS_APPROVED":    2,
	"WALLET_REQUEST_STATUS_REJECTED":    3,
}

func (x WalletRequestStatus) String() string {
	return proto.EnumName(WalletRequestStatus_name, int32(x))
}

func (WalletRequestStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_51fb94234f9ffc53, []int{0}
}

// WalletType indicates what crypto scheme will be used by this wallet (e.g.
// ECDSA). Its public key will be one of the specified type.
type WalletType int32

const (
	// The wallet type is missing.
	WalletType_WALLET_TYPE_UNSPECIFIED WalletType = 0
	// The wallet is an ECDSA wallet.
	WalletType_WALLET_TYPE_ECDSA WalletType = 1
	// The wallet is an EdDSA wallet.
	WalletType_WALLET_TYPE_EDDSA WalletType = 2
)

var WalletType_name = map[int32]string{
	0: "WALLET_TYPE_UNSPECIFIED",
	1: "WALLET_TYPE_ECDSA",
	2: "WALLET_TYPE_EDDSA",
}

var WalletType_value = map[string]int32{
	"WALLET_TYPE_UNSPECIFIED": 0,
	"WALLET_TYPE_ECDSA":       1,
	"WALLET_TYPE_EDDSA":       2,
}

func (x WalletType) String() string {
	return proto.EnumName(WalletType_name, int32(x))
}

func (WalletType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_51fb94234f9ffc53, []int{1}
}

type WalletRequest struct {
	Id          uint64              `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Creator     string              `protobuf:"bytes,2,opt,name=creator,proto3" json:"creator,omitempty"`
	WorkspaceId uint64              `protobuf:"varint,3,opt,name=workspace_id,json=workspaceId,proto3" json:"workspace_id,omitempty"`
	WalletType  WalletType          `protobuf:"varint,4,opt,name=wallet_type,json=walletType,proto3,enum=fusionchain.treasury.WalletType" json:"wallet_type,omitempty"`
	Status      WalletRequestStatus `protobuf:"varint,5,opt,name=status,proto3,enum=fusionchain.treasury.WalletRequestStatus" json:"status,omitempty"`
	// Holds the result of the request. If status is pending no result is
	// available yet. If status is approved, the result will contain the wallet
	// id. If status is rejected, the result will contain the reason for the
	// rejection.
	//
	// Types that are valid to be assigned to Result:
	//	*WalletRequest_SuccessWalletId
	//	*WalletRequest_RejectReason
	Result isWalletRequest_Result `protobuf_oneof:"result"`
}

func (m *WalletRequest) Reset()         { *m = WalletRequest{} }
func (m *WalletRequest) String() string { return proto.CompactTextString(m) }
func (*WalletRequest) ProtoMessage()    {}
func (*WalletRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_51fb94234f9ffc53, []int{0}
}
func (m *WalletRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WalletRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WalletRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WalletRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WalletRequest.Merge(m, src)
}
func (m *WalletRequest) XXX_Size() int {
	return m.Size()
}
func (m *WalletRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_WalletRequest.DiscardUnknown(m)
}

var xxx_messageInfo_WalletRequest proto.InternalMessageInfo

type isWalletRequest_Result interface {
	isWalletRequest_Result()
	MarshalTo([]byte) (int, error)
	Size() int
}

type WalletRequest_SuccessWalletId struct {
	SuccessWalletId uint64 `protobuf:"varint,6,opt,name=success_wallet_id,json=successWalletId,proto3,oneof" json:"success_wallet_id,omitempty"`
}
type WalletRequest_RejectReason struct {
	RejectReason string `protobuf:"bytes,7,opt,name=reject_reason,json=rejectReason,proto3,oneof" json:"reject_reason,omitempty"`
}

func (*WalletRequest_SuccessWalletId) isWalletRequest_Result() {}
func (*WalletRequest_RejectReason) isWalletRequest_Result()    {}

func (m *WalletRequest) GetResult() isWalletRequest_Result {
	if m != nil {
		return m.Result
	}
	return nil
}

func (m *WalletRequest) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *WalletRequest) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *WalletRequest) GetWorkspaceId() uint64 {
	if m != nil {
		return m.WorkspaceId
	}
	return 0
}

func (m *WalletRequest) GetWalletType() WalletType {
	if m != nil {
		return m.WalletType
	}
	return WalletType_WALLET_TYPE_UNSPECIFIED
}

func (m *WalletRequest) GetStatus() WalletRequestStatus {
	if m != nil {
		return m.Status
	}
	return WalletRequestStatus_WALLET_REQUEST_STATUS_UNSPECIFIED
}

func (m *WalletRequest) GetSuccessWalletId() uint64 {
	if x, ok := m.GetResult().(*WalletRequest_SuccessWalletId); ok {
		return x.SuccessWalletId
	}
	return 0
}

func (m *WalletRequest) GetRejectReason() string {
	if x, ok := m.GetResult().(*WalletRequest_RejectReason); ok {
		return x.RejectReason
	}
	return ""
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*WalletRequest) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*WalletRequest_SuccessWalletId)(nil),
		(*WalletRequest_RejectReason)(nil),
	}
}

type Wallet struct {
	Id          uint64     `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	WorkspaceId uint64     `protobuf:"varint,2,opt,name=workspace_id,json=workspaceId,proto3" json:"workspace_id,omitempty"`
	Type        WalletType `protobuf:"varint,3,opt,name=type,proto3,enum=fusionchain.treasury.WalletType" json:"type,omitempty"`
	PublicKey   []byte     `protobuf:"bytes,4,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"`
}

func (m *Wallet) Reset()         { *m = Wallet{} }
func (m *Wallet) String() string { return proto.CompactTextString(m) }
func (*Wallet) ProtoMessage()    {}
func (*Wallet) Descriptor() ([]byte, []int) {
	return fileDescriptor_51fb94234f9ffc53, []int{1}
}
func (m *Wallet) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Wallet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Wallet.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Wallet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Wallet.Merge(m, src)
}
func (m *Wallet) XXX_Size() int {
	return m.Size()
}
func (m *Wallet) XXX_DiscardUnknown() {
	xxx_messageInfo_Wallet.DiscardUnknown(m)
}

var xxx_messageInfo_Wallet proto.InternalMessageInfo

func (m *Wallet) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Wallet) GetWorkspaceId() uint64 {
	if m != nil {
		return m.WorkspaceId
	}
	return 0
}

func (m *Wallet) GetType() WalletType {
	if m != nil {
		return m.Type
	}
	return WalletType_WALLET_TYPE_UNSPECIFIED
}

func (m *Wallet) GetPublicKey() []byte {
	if m != nil {
		return m.PublicKey
	}
	return nil
}

func init() {
	proto.RegisterEnum("fusionchain.treasury.WalletRequestStatus", WalletRequestStatus_name, WalletRequestStatus_value)
	proto.RegisterEnum("fusionchain.treasury.WalletType", WalletType_name, WalletType_value)
	proto.RegisterType((*WalletRequest)(nil), "fusionchain.treasury.WalletRequest")
	proto.RegisterType((*Wallet)(nil), "fusionchain.treasury.Wallet")
}

func init() { proto.RegisterFile("fusionchain/treasury/wallet.proto", fileDescriptor_51fb94234f9ffc53) }

var fileDescriptor_51fb94234f9ffc53 = []byte{
	// 497 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x93, 0xcf, 0x6e, 0xd3, 0x4c,
	0x14, 0xc5, 0x3d, 0x4e, 0xbe, 0xf4, 0xeb, 0x6d, 0x5a, 0xd2, 0x01, 0x84, 0x25, 0x54, 0x2b, 0x89,
	0x54, 0x29, 0x54, 0xc8, 0x91, 0x00, 0x89, 0xb5, 0x1b, 0x0f, 0x34, 0x50, 0x85, 0x74, 0xec, 0x10,
	0xc1, 0xc6, 0x72, 0xec, 0x01, 0x4c, 0x43, 0x9c, 0xcc, 0x8c, 0x15, 0xfc, 0x16, 0x7d, 0x0b, 0x9e,
	0x83, 0x1d, 0xcb, 0x2e, 0x59, 0xa2, 0xe4, 0x45, 0x90, 0xff, 0xb4, 0x8d, 0x9a, 0x80, 0xd8, 0xd9,
	0x67, 0xce, 0xb9, 0x3a, 0xf7, 0x27, 0x5d, 0x68, 0x7c, 0x88, 0x45, 0x18, 0x4d, 0xfc, 0x4f, 0x5e,
	0x38, 0x69, 0x4b, 0xce, 0x3c, 0x11, 0xf3, 0xa4, 0x3d, 0xf7, 0xc6, 0x63, 0x26, 0x8d, 0x29, 0x8f,
	0x64, 0x84, 0xef, 0xad, 0x58, 0x8c, 0x2b, 0x4b, 0xf3, 0xbb, 0x0a, 0xbb, 0xc3, 0xcc, 0x46, 0xd9,
	0x2c, 0x66, 0x42, 0xe2, 0x3d, 0x50, 0xc3, 0x40, 0x43, 0x75, 0xd4, 0x2a, 0x53, 0x35, 0x0c, 0xb0,
	0x06, 0x5b, 0x3e, 0x67, 0x9e, 0x8c, 0xb8, 0xa6, 0xd6, 0x51, 0x6b, 0x9b, 0x5e, 0xfd, 0xe2, 0x06,
	0x54, 0xe7, 0x11, 0x3f, 0x17, 0x53, 0xcf, 0x67, 0x6e, 0x18, 0x68, 0xa5, 0x2c, 0xb3, 0x73, 0xad,
	0x75, 0x03, 0x6c, 0xc2, 0x4e, 0x5e, 0xc2, 0x95, 0xc9, 0x94, 0x69, 0xe5, 0x3a, 0x6a, 0xed, 0x3d,
	0xa9, 0x1b, 0x9b, 0xaa, 0x18, 0x79, 0x0d, 0x27, 0x99, 0x32, 0x0a, 0xf3, 0xeb, 0x6f, 0x6c, 0x42,
	0x45, 0x48, 0x4f, 0xc6, 0x42, 0xfb, 0x2f, 0x4b, 0x3f, 0xfa, 0x5b, 0xba, 0x58, 0xc2, 0xce, 0x02,
	0xb4, 0x08, 0xe2, 0xc7, 0xb0, 0x2f, 0x62, 0xdf, 0x67, 0x42, 0xb8, 0x45, 0x9b, 0x30, 0xd0, 0x2a,
	0x69, 0xdb, 0x13, 0x85, 0xde, 0x29, 0x9e, 0xf2, 0x01, 0xdd, 0x00, 0x1f, 0xc2, 0x2e, 0x67, 0x9f,
	0x99, 0x2f, 0xdd, 0x74, 0x76, 0x34, 0xd1, 0xb6, 0xd2, 0xb5, 0x4f, 0x14, 0x5a, 0xcd, 0x65, 0x9a,
	0xa9, 0xc7, 0xff, 0x43, 0x85, 0x33, 0x11, 0x8f, 0x65, 0xf3, 0x02, 0x41, 0x25, 0x4f, 0xaf, 0xc1,
	0xbb, 0x8d, 0x48, 0x5d, 0x47, 0xf4, 0x0c, 0xca, 0x19, 0x9b, 0xd2, 0x3f, 0xb2, 0xc9, 0xdc, 0xf8,
	0x00, 0x60, 0x1a, 0x8f, 0xc6, 0xa1, 0xef, 0x9e, 0xb3, 0x24, 0xe3, 0x5a, 0xa5, 0xdb, 0xb9, 0xf2,
	0x9a, 0x25, 0x47, 0xdf, 0x10, 0xdc, 0xdd, 0x40, 0x04, 0x1f, 0x42, 0x63, 0x68, 0x9e, 0x9e, 0x12,
	0xc7, 0xa5, 0xe4, 0x6c, 0x40, 0x6c, 0xc7, 0xb5, 0x1d, 0xd3, 0x19, 0xd8, 0xee, 0xa0, 0x67, 0xf7,
	0x49, 0xa7, 0xfb, 0xa2, 0x4b, 0xac, 0x9a, 0x82, 0x1b, 0x70, 0xb0, 0xd9, 0xd6, 0x27, 0x3d, 0xab,
	0xdb, 0x7b, 0x59, 0x43, 0xb8, 0x09, 0xfa, 0x66, 0x8b, 0xd9, 0xef, 0xd3, 0x37, 0x6f, 0x89, 0x55,
	0x53, 0xff, 0xec, 0xa1, 0xe4, 0x15, 0xe9, 0x38, 0xc4, 0xaa, 0x95, 0x8e, 0x86, 0x00, 0x37, 0xcb,
	0xe1, 0x87, 0xf0, 0xa0, 0x48, 0x38, 0xef, 0xfa, 0xe4, 0x56, 0xab, 0xfb, 0xb0, 0xbf, 0xfa, 0x48,
	0x3a, 0x96, 0x6d, 0xd6, 0xd0, 0x9a, 0x6c, 0xa5, 0xb2, 0x7a, 0x7c, 0xf6, 0x63, 0xa1, 0xa3, 0xcb,
	0x85, 0x8e, 0x7e, 0x2d, 0x74, 0x74, 0xb1, 0xd4, 0x95, 0xcb, 0xa5, 0xae, 0xfc, 0x5c, 0xea, 0xca,
	0xfb, 0xe7, 0x1f, 0x43, 0x39, 0xf6, 0x46, 0xc6, 0x8c, 0xb3, 0x20, 0x32, 0xfc, 0xe8, 0x4b, 0x7b,
	0xc6, 0x83, 0x28, 0xbf, 0x9d, 0xd5, 0x3b, 0xfa, 0x7a, 0x73, 0x49, 0x29, 0x73, 0x31, 0xaa, 0x64,
	0x97, 0xf4, 0xf4, 0x77, 0x00, 0x00, 0x00, 0xff, 0xff, 0x76, 0x61, 0x72, 0x1d, 0x6e, 0x03, 0x00,
	0x00,
}

func (m *WalletRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WalletRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WalletRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Result != nil {
		{
			size := m.Result.Size()
			i -= size
			if _, err := m.Result.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.Status != 0 {
		i = encodeVarintWallet(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x28
	}
	if m.WalletType != 0 {
		i = encodeVarintWallet(dAtA, i, uint64(m.WalletType))
		i--
		dAtA[i] = 0x20
	}
	if m.WorkspaceId != 0 {
		i = encodeVarintWallet(dAtA, i, uint64(m.WorkspaceId))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintWallet(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintWallet(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *WalletRequest_SuccessWalletId) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WalletRequest_SuccessWalletId) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i = encodeVarintWallet(dAtA, i, uint64(m.SuccessWalletId))
	i--
	dAtA[i] = 0x30
	return len(dAtA) - i, nil
}
func (m *WalletRequest_RejectReason) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WalletRequest_RejectReason) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.RejectReason)
	copy(dAtA[i:], m.RejectReason)
	i = encodeVarintWallet(dAtA, i, uint64(len(m.RejectReason)))
	i--
	dAtA[i] = 0x3a
	return len(dAtA) - i, nil
}
func (m *Wallet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Wallet) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Wallet) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PublicKey) > 0 {
		i -= len(m.PublicKey)
		copy(dAtA[i:], m.PublicKey)
		i = encodeVarintWallet(dAtA, i, uint64(len(m.PublicKey)))
		i--
		dAtA[i] = 0x22
	}
	if m.Type != 0 {
		i = encodeVarintWallet(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x18
	}
	if m.WorkspaceId != 0 {
		i = encodeVarintWallet(dAtA, i, uint64(m.WorkspaceId))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != 0 {
		i = encodeVarintWallet(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintWallet(dAtA []byte, offset int, v uint64) int {
	offset -= sovWallet(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *WalletRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovWallet(uint64(m.Id))
	}
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovWallet(uint64(l))
	}
	if m.WorkspaceId != 0 {
		n += 1 + sovWallet(uint64(m.WorkspaceId))
	}
	if m.WalletType != 0 {
		n += 1 + sovWallet(uint64(m.WalletType))
	}
	if m.Status != 0 {
		n += 1 + sovWallet(uint64(m.Status))
	}
	if m.Result != nil {
		n += m.Result.Size()
	}
	return n
}

func (m *WalletRequest_SuccessWalletId) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovWallet(uint64(m.SuccessWalletId))
	return n
}
func (m *WalletRequest_RejectReason) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RejectReason)
	n += 1 + l + sovWallet(uint64(l))
	return n
}
func (m *Wallet) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovWallet(uint64(m.Id))
	}
	if m.WorkspaceId != 0 {
		n += 1 + sovWallet(uint64(m.WorkspaceId))
	}
	if m.Type != 0 {
		n += 1 + sovWallet(uint64(m.Type))
	}
	l = len(m.PublicKey)
	if l > 0 {
		n += 1 + l + sovWallet(uint64(l))
	}
	return n
}

func sovWallet(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozWallet(x uint64) (n int) {
	return sovWallet(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *WalletRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWallet
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WalletRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WalletRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWallet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWallet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWallet
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWallet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkspaceId", wireType)
			}
			m.WorkspaceId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWallet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WorkspaceId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WalletType", wireType)
			}
			m.WalletType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWallet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WalletType |= WalletType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWallet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= WalletRequestStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SuccessWalletId", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWallet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Result = &WalletRequest_SuccessWalletId{v}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RejectReason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWallet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWallet
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWallet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Result = &WalletRequest_RejectReason{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWallet(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthWallet
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Wallet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWallet
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Wallet: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Wallet: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWallet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkspaceId", wireType)
			}
			m.WorkspaceId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWallet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WorkspaceId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWallet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= WalletType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PublicKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWallet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthWallet
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthWallet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PublicKey = append(m.PublicKey[:0], dAtA[iNdEx:postIndex]...)
			if m.PublicKey == nil {
				m.PublicKey = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWallet(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthWallet
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipWallet(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowWallet
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowWallet
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowWallet
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthWallet
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupWallet
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthWallet
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthWallet        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowWallet          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupWallet = fmt.Errorf("proto: unexpected end of group")
)
